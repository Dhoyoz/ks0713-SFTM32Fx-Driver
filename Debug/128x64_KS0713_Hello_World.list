
128x64_KS0713_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004494  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000119c  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057c0  080057c0  000067c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000210  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c388  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdc  00000000  00000000  00013420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00015400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0e  00000000  00000000  00016118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021efd  00000000  00000000  00016b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4de  00000000  00000000  00038a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9a7  00000000  00000000  00046f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001138a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa4  00000000  00000000  001138ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00117890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800460c 	.word	0x0800460c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800460c 	.word	0x0800460c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ks0713_init>:


extern SPI_HandleTypeDef hspi1;

void ks0713_init ()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	LCD_IO_Init();
 80005b0:	f000 fe72 	bl	8001298 <LCD_IO_Init>
	LCD_Delay (50);
 80005b4:	2032      	movs	r0, #50	@ 0x32
 80005b6:	f000 fe8b 	bl	80012d0 <LCD_Delay>
	ks0713_WriteCommand( KS0713_RESET);						// reset
 80005ba:	20e2      	movs	r0, #226	@ 0xe2
 80005bc:	f000 fdf2 	bl	80011a4 <ks0713_WriteCommand>
	LCD_Delay (50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f000 fe85 	bl	80012d0 <LCD_Delay>
	ks0713_WriteCommand( KS0713_ADC_SELECT_NORMAL);			// ADC select: normal
 80005c6:	20a0      	movs	r0, #160	@ 0xa0
 80005c8:	f000 fdec 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_SHL_SELECT_NORMAL);			// SHL select:
 80005cc:	20c0      	movs	r0, #192	@ 0xc0
 80005ce:	f000 fde9 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_LCD_BIAS);					// LCD bias select
 80005d2:	20a2      	movs	r0, #162	@ 0xa2
 80005d4:	f000 fde6 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_POWER_CTRL_VC);				// Voltage converter ON - VC
 80005d8:	202c      	movs	r0, #44	@ 0x2c
 80005da:	f000 fde3 	bl	80011a4 <ks0713_WriteCommand>
	LCD_Delay (1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fe76 	bl	80012d0 <LCD_Delay>
	ks0713_WriteCommand( KS0713_POWER_CTRL_VR);				// Voltage regulator ON - VR
 80005e4:	202e      	movs	r0, #46	@ 0x2e
 80005e6:	f000 fddd 	bl	80011a4 <ks0713_WriteCommand>
	LCD_Delay (1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fe70 	bl	80012d0 <LCD_Delay>
	ks0713_WriteCommand( KS0713_POWER_CTRL_VF);				// Voltage follower ON - VF
 80005f0:	202f      	movs	r0, #47	@ 0x2f
 80005f2:	f000 fdd7 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_REG_RES_SEL);				// Regulator resistor select 0x20..0x27
 80005f6:	2025      	movs	r0, #37	@ 0x25
 80005f8:	f000 fdd4 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_SET_REF_VOLTAGE);			// Reference voltage register set
 80005fc:	2081      	movs	r0, #129	@ 0x81
 80005fe:	f000 fdd1 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_DISPLAY_LINE);				// initial display line 0x40..0x7f
 8000602:	2040      	movs	r0, #64	@ 0x40
 8000604:	f000 fdce 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_DISP_ON);					// display on
 8000608:	20af      	movs	r0, #175	@ 0xaf
 800060a:	f000 fdcb 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_ENTIRE_DISP_NORMAL);		// Reverse display On/Off
 800060e:	20a4      	movs	r0, #164	@ 0xa4
 8000610:	f000 fdc8 	bl	80011a4 <ks0713_WriteCommand>
	LCD_Delay (50);
 8000614:	2032      	movs	r0, #50	@ 0x32
 8000616:	f000 fe5b 	bl	80012d0 <LCD_Delay>
	ks0713_WriteCommand( KS0713_SET_REF_VOLTAGE);			// Reference voltage 0..63
 800061a:	2081      	movs	r0, #129	@ 0x81
 800061c:	f000 fdc2 	bl	80011a4 <ks0713_WriteCommand>
	ks0713_WriteCommand( KS0713_CONTRAST);
 8000620:	2025      	movs	r0, #37	@ 0x25
 8000622:	f000 fdbf 	bl	80011a4 <ks0713_WriteCommand>
	LCD_Clear();
 8000626:	f000 f983 	bl	8000930 <LCD_Clear>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <LCD_DemoMode>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DemoMode (void){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	LCD_ShowString ("KS0713 Driver", 15,16);
 8000636:	2210      	movs	r2, #16
 8000638:	210f      	movs	r1, #15
 800063a:	4849      	ldr	r0, [pc, #292]	@ (8000760 <LCD_DemoMode+0x130>)
 800063c:	f000 fbba 	bl	8000db4 <LCD_ShowString>
	LCD_DrawHLine (9,0,127);
 8000640:	227f      	movs	r2, #127	@ 0x7f
 8000642:	2100      	movs	r1, #0
 8000644:	2009      	movs	r0, #9
 8000646:	f000 f9c7 	bl	80009d8 <LCD_DrawHLine>
	LCD_ShowString ("Hello World", 20,32);
 800064a:	2220      	movs	r2, #32
 800064c:	2114      	movs	r1, #20
 800064e:	4845      	ldr	r0, [pc, #276]	@ (8000764 <LCD_DemoMode+0x134>)
 8000650:	f000 fbb0 	bl	8000db4 <LCD_ShowString>
	LCD_DrawHLine (42,0,127);
 8000654:	227f      	movs	r2, #127	@ 0x7f
 8000656:	2100      	movs	r1, #0
 8000658:	202a      	movs	r0, #42	@ 0x2a
 800065a:	f000 f9bd 	bl	80009d8 <LCD_DrawHLine>
	LCD_ShowString ("LasCosasdeDani",10 ,55);
 800065e:	2237      	movs	r2, #55	@ 0x37
 8000660:	210a      	movs	r1, #10
 8000662:	4841      	ldr	r0, [pc, #260]	@ (8000768 <LCD_DemoMode+0x138>)
 8000664:	f000 fba6 	bl	8000db4 <LCD_ShowString>
	LCD_DrawRectangle (0,0,127,63);
 8000668:	233f      	movs	r3, #63	@ 0x3f
 800066a:	227f      	movs	r2, #127	@ 0x7f
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fa66 	bl	8000b40 <LCD_DrawRectangle>
	LCD_Delay (5000);
 8000674:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000678:	f000 fe2a 	bl	80012d0 <LCD_Delay>
	LCD_Clear();
 800067c:	f000 f958 	bl	8000930 <LCD_Clear>
	LCD_DrawRectangle (0,0,127,63);
 8000680:	233f      	movs	r3, #63	@ 0x3f
 8000682:	227f      	movs	r2, #127	@ 0x7f
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fa5a 	bl	8000b40 <LCD_DrawRectangle>
	LCD_Delay (1500);
 800068c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000690:	f000 fe1e 	bl	80012d0 <LCD_Delay>
	LCD_DrawRectangle (8,8,119,55);
 8000694:	2337      	movs	r3, #55	@ 0x37
 8000696:	2277      	movs	r2, #119	@ 0x77
 8000698:	2108      	movs	r1, #8
 800069a:	2008      	movs	r0, #8
 800069c:	f000 fa50 	bl	8000b40 <LCD_DrawRectangle>
	LCD_Delay (1500);
 80006a0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006a4:	f000 fe14 	bl	80012d0 <LCD_Delay>
	LCD_DrawRectangle (16,16,111,47);
 80006a8:	232f      	movs	r3, #47	@ 0x2f
 80006aa:	226f      	movs	r2, #111	@ 0x6f
 80006ac:	2110      	movs	r1, #16
 80006ae:	2010      	movs	r0, #16
 80006b0:	f000 fa46 	bl	8000b40 <LCD_DrawRectangle>
	LCD_Delay (1500);
 80006b4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006b8:	f000 fe0a 	bl	80012d0 <LCD_Delay>
	LCD_DrawRectangle (24,24,103,39);
 80006bc:	2327      	movs	r3, #39	@ 0x27
 80006be:	2267      	movs	r2, #103	@ 0x67
 80006c0:	2118      	movs	r1, #24
 80006c2:	2018      	movs	r0, #24
 80006c4:	f000 fa3c 	bl	8000b40 <LCD_DrawRectangle>
	LCD_Delay (3000);
 80006c8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006cc:	f000 fe00 	bl	80012d0 <LCD_Delay>
	LCD_Clear();
 80006d0:	f000 f92e 	bl	8000930 <LCD_Clear>
	LCD_DisplayPicture ();
 80006d4:	f000 fa6c 	bl	8000bb0 <LCD_DisplayPicture>
	LCD_Delay (5000);
 80006d8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006dc:	f000 fdf8 	bl	80012d0 <LCD_Delay>
    LCD_Clear();
 80006e0:	f000 f926 	bl	8000930 <LCD_Clear>
    LCD_DisplayPicture2 ();
 80006e4:	f000 f846 	bl	8000774 <LCD_DisplayPicture2>
    LCD_ShowString ("Image ",70,8);
 80006e8:	2208      	movs	r2, #8
 80006ea:	2146      	movs	r1, #70	@ 0x46
 80006ec:	481f      	ldr	r0, [pc, #124]	@ (800076c <LCD_DemoMode+0x13c>)
 80006ee:	f000 fb61 	bl	8000db4 <LCD_ShowString>
    LCD_ShowString ("64x64px ",70,24);
 80006f2:	2218      	movs	r2, #24
 80006f4:	2146      	movs	r1, #70	@ 0x46
 80006f6:	481e      	ldr	r0, [pc, #120]	@ (8000770 <LCD_DemoMode+0x140>)
 80006f8:	f000 fb5c 	bl	8000db4 <LCD_ShowString>

	for (uint8_t a = 4; a > 0; a--){
 80006fc:	2304      	movs	r3, #4
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	e00c      	b.n	800071c <LCD_DemoMode+0xec>
		LCD_WriteFont (a,90 ,48);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2230      	movs	r2, #48	@ 0x30
 8000706:	215a      	movs	r1, #90	@ 0x5a
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fb25 	bl	8000d58 <LCD_WriteFont>
		LCD_Delay (750);
 800070e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000712:	f000 fddd 	bl	80012d0 <LCD_Delay>
	for (uint8_t a = 4; a > 0; a--){
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3b01      	subs	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1ef      	bne.n	8000702 <LCD_DemoMode+0xd2>
	}

	LCD_RandomPixel ();
 8000722:	f000 f86f 	bl	8000804 <LCD_RandomPixel>
	LCD_Clear();
 8000726:	f000 f903 	bl	8000930 <LCD_Clear>

	for (uint8_t a = 0; a<8; a++){
 800072a:	2300      	movs	r3, #0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	e00c      	b.n	800074a <LCD_DemoMode+0x11a>
		LCD_Fill();
 8000730:	f000 f928 	bl	8000984 <LCD_Fill>
		LCD_Delay(100);
 8000734:	2064      	movs	r0, #100	@ 0x64
 8000736:	f000 fdcb 	bl	80012d0 <LCD_Delay>
		LCD_Clear();
 800073a:	f000 f8f9 	bl	8000930 <LCD_Clear>
		LCD_Delay (100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f000 fdc6 	bl	80012d0 <LCD_Delay>
	for (uint8_t a = 0; a<8; a++){
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	3301      	adds	r3, #1
 8000748:	71bb      	strb	r3, [r7, #6]
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	2b07      	cmp	r3, #7
 800074e:	d9ef      	bls.n	8000730 <LCD_DemoMode+0x100>
	}

	LCD_TestPixel ();
 8000750:	f000 f898 	bl	8000884 <LCD_TestPixel>
	LCD_Clear();
 8000754:	f000 f8ec 	bl	8000930 <LCD_Clear>

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08004624 	.word	0x08004624
 8000764:	08004634 	.word	0x08004634
 8000768:	08004640 	.word	0x08004640
 800076c:	08004650 	.word	0x08004650
 8000770:	08004658 	.word	0x08004658

08000774 <LCD_DisplayPicture2>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DisplayPicture2 (void){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
	uint8_t pixel = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	70fb      	strb	r3, [r7, #3]
	uint8_t lo_col, hi_col, x1;
	uint16_t index;
	x1 = 10;
 800077e:	230a      	movs	r3, #10
 8000780:	70bb      	strb	r3, [r7, #2]

	  lo_col= (x1&0x0f);
 8000782:	78bb      	ldrb	r3, [r7, #2]
 8000784:	f003 030f 	and.w	r3, r3, #15
 8000788:	707b      	strb	r3, [r7, #1]
	  hi_col= ((x1>>4)&0x0f)|0x10;
 800078a:	78bb      	ldrb	r3, [r7, #2]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b25b      	sxtb	r3, r3
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	b25b      	sxtb	r3, r3
 8000798:	703b      	strb	r3, [r7, #0]

  for(int x=0; x<8; x++){
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	e026      	b.n	80007ee <LCD_DisplayPicture2+0x7a>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);   //y, page address y=1-0-1-1-y3-y2-y1-y0, 1-page with 8-rows
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b50      	subs	r3, #80	@ 0x50
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fcfb 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(hi_col);
 80007ae:	783b      	ldrb	r3, [r7, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fcf7 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(lo_col);
 80007b6:	787b      	ldrb	r3, [r7, #1]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fcf3 	bl	80011a4 <ks0713_WriteCommand>

    for(int i=0; i<64; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e00e      	b.n	80007e2 <LCD_DisplayPicture2+0x6e>

    	pixel = logocupra[index];
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <LCD_DisplayPicture2+0x8c>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	70fb      	strb	r3, [r7, #3]
    	//pixel = picture[index];
    	ks0713_WriteData(pixel);
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fcc1 	bl	8001158 <ks0713_WriteData>
    	index++;
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	3301      	adds	r3, #1
 80007da:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<64; i++){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80007e6:	dded      	ble.n	80007c4 <LCD_DisplayPicture2+0x50>
  for(int x=0; x<8; x++){
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	ddd5      	ble.n	80007a0 <LCD_DisplayPicture2+0x2c>
      }
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	080054c8 	.word	0x080054c8

08000804 <LCD_RandomPixel>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_RandomPixel (void){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	uint8_t x;
	uint8_t y;
	uint8_t byte;
	for (uint16_t a = 0 ; a<10000; a++ ){
 800080a:	2300      	movs	r3, #0
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	e02c      	b.n	800086a <LCD_RandomPixel+0x66>
	x = random();
 8000810:	f002 ff20 	bl	8003654 <random>
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
	y = random();
 8000818:	f002 ff1c 	bl	8003654 <random>
 800081c:	4603      	mov	r3, r0
 800081e:	71bb      	strb	r3, [r7, #6]
	byte = random();
 8000820:	f002 ff18 	bl	8003654 <random>
 8000824:	4603      	mov	r3, r0
 8000826:	70fb      	strb	r3, [r7, #3]
	while (x > 127) x=x/5;
 8000828:	e005      	b.n	8000836 <LCD_RandomPixel+0x32>
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <LCD_RandomPixel+0x7c>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	dbf5      	blt.n	800082a <LCD_RandomPixel+0x26>
	while (y > 63) y=y/4;
 800083e:	e002      	b.n	8000846 <LCD_RandomPixel+0x42>
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	71bb      	strb	r3, [r7, #6]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	2b3f      	cmp	r3, #63	@ 0x3f
 800084a:	d8f9      	bhi.n	8000840 <LCD_RandomPixel+0x3c>
	while (y > 255) y=y/3;
 800084c:	bf00      	nop
	//ks0713_WritePixel (x, y);
	ks0713_WriteBytePixel (x,y, byte);
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000856:	78fa      	ldrb	r2, [r7, #3]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fa64 	bl	8000d26 <ks0713_WriteBytePixel>
	LCD_Delay (1);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fd36 	bl	80012d0 <LCD_Delay>
	for (uint16_t a = 0 ; a<10000; a++ ){
 8000864:	88bb      	ldrh	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	80bb      	strh	r3, [r7, #4]
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000870:	4293      	cmp	r3, r2
 8000872:	d9cd      	bls.n	8000810 <LCD_RandomPixel+0xc>
	//LCD_Clear();
	}
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	cccccccd 	.word	0xcccccccd

08000884 <LCD_TestPixel>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_TestPixel(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
  for(int x=0; x<8; x++){
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e01e      	b.n	80008ce <LCD_TestPixel+0x4a>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3b50      	subs	r3, #80	@ 0x50
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc83 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_MSB);
 800089e:	2010      	movs	r0, #16
 80008a0:	f000 fc80 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_LSB);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fc7d 	bl	80011a4 <ks0713_WriteCommand>

    for(int i=0; i<128; i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	e008      	b.n	80008c2 <LCD_TestPixel+0x3e>
    	ks0713_WriteData(0xff);
 80008b0:	20ff      	movs	r0, #255	@ 0xff
 80008b2:	f000 fc51 	bl	8001158 <ks0713_WriteData>
    	LCD_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 fd0a 	bl	80012d0 <LCD_Delay>
    for(int i=0; i<128; i++){
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3301      	adds	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80008c6:	ddf3      	ble.n	80008b0 <LCD_TestPixel+0x2c>
  for(int x=0; x<8; x++){
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	dddd      	ble.n	8000890 <LCD_TestPixel+0xc>
      }
  }
  LCD_Delay (1500);
 80008d4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008d8:	f000 fcfa 	bl	80012d0 <LCD_Delay>
  for(int x=0; x<8; x++){
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	e01e      	b.n	8000920 <LCD_TestPixel+0x9c>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3b50      	subs	r3, #80	@ 0x50
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fc5a 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_MSB);
 80008f0:	2010      	movs	r0, #16
 80008f2:	f000 fc57 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_LSB);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fc54 	bl	80011a4 <ks0713_WriteCommand>

    for(int i=0; i<128; i++){
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	e008      	b.n	8000914 <LCD_TestPixel+0x90>
    	ks0713_WriteData(0x00);
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fc28 	bl	8001158 <ks0713_WriteData>
    	LCD_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fce1 	bl	80012d0 <LCD_Delay>
    for(int i=0; i<128; i++){
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b7f      	cmp	r3, #127	@ 0x7f
 8000918:	ddf3      	ble.n	8000902 <LCD_TestPixel+0x7e>
  for(int x=0; x<8; x++){
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b07      	cmp	r3, #7
 8000924:	dddd      	ble.n	80008e2 <LCD_TestPixel+0x5e>
      }
  }

}
 8000926:	bf00      	nop
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <LCD_Clear>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_Clear(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  for(int x=0; x<8; x++){
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e01b      	b.n	8000974 <LCD_Clear+0x44>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b50      	subs	r3, #80	@ 0x50
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fc2d 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_MSB);
 800094a:	2010      	movs	r0, #16
 800094c:	f000 fc2a 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_LSB);
 8000950:	2000      	movs	r0, #0
 8000952:	f000 fc27 	bl	80011a4 <ks0713_WriteCommand>
    for(int i=0; i<128; i++){
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	e005      	b.n	8000968 <LCD_Clear+0x38>
    	ks0713_WriteData(0x0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fbfb 	bl	8001158 <ks0713_WriteData>
    for(int i=0; i<128; i++){
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b7f      	cmp	r3, #127	@ 0x7f
 800096c:	ddf6      	ble.n	800095c <LCD_Clear+0x2c>
  for(int x=0; x<8; x++){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b07      	cmp	r3, #7
 8000978:	dde0      	ble.n	800093c <LCD_Clear+0xc>
      }
  }
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <LCD_Fill>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_Fill(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  for(int x=0; x<8; x++){
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e01b      	b.n	80009c8 <LCD_Fill+0x44>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	3b50      	subs	r3, #80	@ 0x50
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fc03 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_MSB);
 800099e:	2010      	movs	r0, #16
 80009a0:	f000 fc00 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_LSB);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fbfd 	bl	80011a4 <ks0713_WriteCommand>
    for(int i=0; i<128; i++){
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	e005      	b.n	80009bc <LCD_Fill+0x38>
    	ks0713_WriteData(0xff);
 80009b0:	20ff      	movs	r0, #255	@ 0xff
 80009b2:	f000 fbd1 	bl	8001158 <ks0713_WriteData>
    for(int i=0; i<128; i++){
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c0:	ddf6      	ble.n	80009b0 <LCD_Fill+0x2c>
  for(int x=0; x<8; x++){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	dde0      	ble.n	8000990 <LCD_Fill+0xc>
      }
  }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <LCD_DrawHLine>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DrawHLine(int8_t y1, int8_t x1, int8_t x2){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	460b      	mov	r3, r1
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	4613      	mov	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
	uint8_t delta_x;
	delta_x=x2-x1;
 80009ea:	797a      	ldrb	r2, [r7, #5]
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	72fb      	strb	r3, [r7, #11]
	for(int a=0; a <=delta_x ;a++ )
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e00e      	b.n	8000a16 <LCD_DrawHLine+0x3e>
	{
		ks0713_WritePixel(x1++,y1);
 80009f8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80009fc:	b2d3      	uxtb	r3, r2
 80009fe:	3301      	adds	r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	71bb      	strb	r3, [r7, #6]
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	f000 f908 	bl	8000c20 <ks0713_WritePixel>
	for(int a=0; a <=delta_x ;a++ )
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	ddec      	ble.n	80009f8 <LCD_DrawHLine+0x20>

	}
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <LCD_DrawVLine>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DrawVLine(int8_t x, int8_t y1, int8_t y2){
 8000a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a2c:	b08b      	sub	sp, #44	@ 0x2c
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	460b      	mov	r3, r1
 8000a36:	71bb      	strb	r3, [r7, #6]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	717b      	strb	r3, [r7, #5]
	uint64_t Columna=0;
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t delta_y;
	delta_y=y2-y1;
 8000a48:	797a      	ldrb	r2, [r7, #5]
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	74fb      	strb	r3, [r7, #19]
	uint8_t PixelBlock [8] = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]

	for (int a=0; a<delta_y; a++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	e012      	b.n	8000a86 <LCD_DrawVLine+0x5e>
		Columna = Columna << 1;
 8000a60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a64:	eb12 0802 	adds.w	r8, r2, r2
 8000a68:	eb43 0903 	adc.w	r9, r3, r3
 8000a6c:	e9c7 8908 	strd	r8, r9, [r7, #32]
		Columna++;
 8000a70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a74:	f112 0a01 	adds.w	sl, r2, #1
 8000a78:	f143 0b00 	adc.w	fp, r3, #0
 8000a7c:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	for (int a=0; a<delta_y; a++){
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	dbe8      	blt.n	8000a60 <LCD_DrawVLine+0x38>
	}
	Columna = Columna << y1;
 8000a8e:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a96:	f1a1 0620 	sub.w	r6, r1, #32
 8000a9a:	f1c1 0020 	rsb	r0, r1, #32
 8000a9e:	fa03 f501 	lsl.w	r5, r3, r1
 8000aa2:	fa02 f606 	lsl.w	r6, r2, r6
 8000aa6:	4335      	orrs	r5, r6
 8000aa8:	fa22 f000 	lsr.w	r0, r2, r0
 8000aac:	4305      	orrs	r5, r0
 8000aae:	fa02 f401 	lsl.w	r4, r2, r1
 8000ab2:	e9c7 4508 	strd	r4, r5, [r7, #32]

	for (int a=0; a<8; a++){
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	e016      	b.n	8000aea <LCD_DrawVLine+0xc2>
		PixelBlock[a] = Columna;
 8000abc:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	460a      	mov	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
		Columna = Columna >> 8;
 8000acc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	0a02      	lsrs	r2, r0, #8
 8000ada:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ade:	0a0b      	lsrs	r3, r1, #8
 8000ae0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int a=0; a<8; a++){
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	2b07      	cmp	r3, #7
 8000aee:	dde5      	ble.n	8000abc <LCD_DrawVLine+0x94>
	}
	for (int a=1; a<9; a++){
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e01b      	b.n	8000b2e <LCD_DrawVLine+0x106>
		if (PixelBlock[a-1] != 0){
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	3328      	adds	r3, #40	@ 0x28
 8000afc:	443b      	add	r3, r7
 8000afe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d010      	beq.n	8000b28 <LCD_DrawVLine+0x100>
		ks0713_WriteBytePixel(x,((a-1)*8),PixelBlock[a-1]);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	b259      	sxtb	r1, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	3328      	adds	r3, #40	@ 0x28
 8000b18:	443b      	add	r3, r7
 8000b1a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f8ff 	bl	8000d26 <ks0713_WriteBytePixel>
	for (int a=1; a<9; a++){
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	dde0      	ble.n	8000af6 <LCD_DrawVLine+0xce>
		}
	}
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	372c      	adds	r7, #44	@ 0x2c
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b40 <LCD_DrawRectangle>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DrawRectangle(int8_t x1, int8_t y1, int8_t x2, int8_t y2){
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	4603      	mov	r3, r0
 8000b54:	71bb      	strb	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	717b      	strb	r3, [r7, #5]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	713b      	strb	r3, [r7, #4]
	LCD_DrawHLine(y1,x1,x2);
 8000b5e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8000b62:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000b66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff34 	bl	80009d8 <LCD_DrawHLine>
	LCD_DrawHLine(y2,x1,x2);
 8000b70:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8000b74:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000b78:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff2b 	bl	80009d8 <LCD_DrawHLine>
	LCD_DrawVLine(x1,y1,y2);
 8000b82:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8000b86:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff4a 	bl	8000a28 <LCD_DrawVLine>
	LCD_DrawVLine(x2,y1,y2);
 8000b94:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8000b98:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000b9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff41 	bl	8000a28 <LCD_DrawVLine>
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}
	...

08000bb0 <LCD_DisplayPicture>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_DisplayPicture(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t pixel = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	70fb      	strb	r3, [r7, #3]
	uint16_t index;
  for(int x=0; x<8; x++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e024      	b.n	8000c0a <LCD_DisplayPicture+0x5a>
	  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + x);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3b50      	subs	r3, #80	@ 0x50
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 faeb 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_MSB);
 8000bce:	2010      	movs	r0, #16
 8000bd0:	f000 fae8 	bl	80011a4 <ks0713_WriteCommand>
	  ks0713_WriteCommand(KS0713_SET_COL_ADDR_LSB);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fae5 	bl	80011a4 <ks0713_WriteCommand>
    for(int i=0; i<128; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e00e      	b.n	8000bfe <LCD_DisplayPicture+0x4e>
    	pixel = gImage_logo[index];
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <LCD_DisplayPicture+0x6c>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	70fb      	strb	r3, [r7, #3]
    	ks0713_WriteData(pixel);
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fab3 	bl	8001158 <ks0713_WriteData>
    	index++;
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<128; i++){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c02:	dded      	ble.n	8000be0 <LCD_DisplayPicture+0x30>
  for(int x=0; x<8; x++){
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	ddd7      	ble.n	8000bc0 <LCD_DisplayPicture+0x10>
      }
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	080050c8 	.word	0x080050c8

08000c20 <ks0713_WritePixel>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void ks0713_WritePixel (int8_t x, int8_t y){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	460a      	mov	r2, r1
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]
	LCD_Gotoxy(x,y);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fada 	bl	80011f0 <LCD_Gotoxy>
	uint8_t pixel;
	if (y <= 7){
 8000c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	dc30      	bgt.n	8000ca6 <ks0713_WritePixel+0x86>
		if (y==7) pixel = 0x80;
 8000c44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	d101      	bne.n	8000c50 <ks0713_WritePixel+0x30>
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	73fb      	strb	r3, [r7, #15]
		if (y==6) pixel = 0x40;
 8000c50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d101      	bne.n	8000c5c <ks0713_WritePixel+0x3c>
 8000c58:	2340      	movs	r3, #64	@ 0x40
 8000c5a:	73fb      	strb	r3, [r7, #15]
		if (y==5) pixel = 0x20;
 8000c5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d101      	bne.n	8000c68 <ks0713_WritePixel+0x48>
 8000c64:	2320      	movs	r3, #32
 8000c66:	73fb      	strb	r3, [r7, #15]
		if (y==4) pixel = 0x10;
 8000c68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d101      	bne.n	8000c74 <ks0713_WritePixel+0x54>
 8000c70:	2310      	movs	r3, #16
 8000c72:	73fb      	strb	r3, [r7, #15]
		if (y==3) pixel = 0x08;
 8000c74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d101      	bne.n	8000c80 <ks0713_WritePixel+0x60>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	73fb      	strb	r3, [r7, #15]
		if (y==2) pixel = 0x04;
 8000c80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d101      	bne.n	8000c8c <ks0713_WritePixel+0x6c>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	73fb      	strb	r3, [r7, #15]
		if (y==1) pixel = 0x02;
 8000c8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <ks0713_WritePixel+0x78>
 8000c94:	2302      	movs	r3, #2
 8000c96:	73fb      	strb	r3, [r7, #15]
		if (y==0) pixel = 0x01;
 8000c98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d139      	bne.n	8000d14 <ks0713_WritePixel+0xf4>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e036      	b.n	8000d14 <ks0713_WritePixel+0xf4>
	}else{
		y=y/8;
 8000ca6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da00      	bge.n	8000cb0 <ks0713_WritePixel+0x90>
 8000cae:	3307      	adds	r3, #7
 8000cb0:	10db      	asrs	r3, r3, #3
 8000cb2:	71bb      	strb	r3, [r7, #6]
		if (y==8) pixel = 0x80;
 8000cb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d101      	bne.n	8000cc0 <ks0713_WritePixel+0xa0>
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	73fb      	strb	r3, [r7, #15]
		if (y==7) pixel = 0x40;
 8000cc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d101      	bne.n	8000ccc <ks0713_WritePixel+0xac>
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	73fb      	strb	r3, [r7, #15]
		if (y==6) pixel = 0x20;
 8000ccc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d101      	bne.n	8000cd8 <ks0713_WritePixel+0xb8>
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	73fb      	strb	r3, [r7, #15]
		if (y==5) pixel = 0x10;
 8000cd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d101      	bne.n	8000ce4 <ks0713_WritePixel+0xc4>
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	73fb      	strb	r3, [r7, #15]
		if (y==4) pixel = 0x08;
 8000ce4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d101      	bne.n	8000cf0 <ks0713_WritePixel+0xd0>
 8000cec:	2308      	movs	r3, #8
 8000cee:	73fb      	strb	r3, [r7, #15]
		if (y==3) pixel = 0x04;
 8000cf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d101      	bne.n	8000cfc <ks0713_WritePixel+0xdc>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	73fb      	strb	r3, [r7, #15]
		if (y==2) pixel = 0x02;
 8000cfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d101      	bne.n	8000d08 <ks0713_WritePixel+0xe8>
 8000d04:	2302      	movs	r3, #2
 8000d06:	73fb      	strb	r3, [r7, #15]
		if (y==1) pixel = 0x01;
 8000d08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <ks0713_WritePixel+0xf4>
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
	}
	ks0713_WriteData(pixel);
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fa1d 	bl	8001158 <ks0713_WriteData>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ks0713_WriteBytePixel>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void ks0713_WriteBytePixel (int8_t x, int8_t y, uint8_t pixel){
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	460b      	mov	r3, r1
 8000d32:	71bb      	strb	r3, [r7, #6]
 8000d34:	4613      	mov	r3, r2
 8000d36:	717b      	strb	r3, [r7, #5]
	LCD_Gotoxy(x,y);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fa56 	bl	80011f0 <LCD_Gotoxy>
	ks0713_WriteData(pixel);
 8000d44:	797b      	ldrb	r3, [r7, #5]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fa05 	bl	8001158 <ks0713_WriteData>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <LCD_WriteFont>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_WriteFont(int num, uint8_t x, uint8_t y){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
 8000d64:	4613      	mov	r3, r2
 8000d66:	70bb      	strb	r3, [r7, #2]
	uint8_t pixel;
	LCD_Gotoxy(x,y);
 8000d68:	78ba      	ldrb	r2, [r7, #2]
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fa3e 	bl	80011f0 <LCD_Gotoxy>
  for(int i=0; i<7; i++){
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e011      	b.n	8000d9e <LCD_WriteFont+0x46>
	  pixel = font_7x8[num][i];
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LCD_WriteFont+0x58>)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d8c:	72fb      	strb	r3, [r7, #11]
	  ks0713_WriteData(pixel);
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f9e0 	bl	8001158 <ks0713_WriteData>
  for(int i=0; i<7; i++){
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	ddea      	ble.n	8000d7a <LCD_WriteFont+0x22>
    }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08004664 	.word	0x08004664

08000db4 <LCD_ShowString>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_ShowString(uint8_t *str, uint16_t x,uint16_t y){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	803b      	strh	r3, [r7, #0]
	uint8_t len = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	72fb      	strb	r3, [r7, #11]
	len = strlen(str);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fa01 	bl	80001d0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	72fb      	strb	r3, [r7, #11]
		for(int num=0; num<len; num++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e015      	b.n	8000e04 <LCD_ShowString+0x50>
			LCD_WriteFont ( LCD_DisplayChar(str[num]), x, y);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f819 	bl	8000e18 <LCD_DisplayChar>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4618      	mov	r0, r3
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	883a      	ldrh	r2, [r7, #0]
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff ffb0 	bl	8000d58 <LCD_WriteFont>
			x=x+8;
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	807b      	strh	r3, [r7, #2]
		for(int num=0; num<len; num++){
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbe5      	blt.n	8000dd8 <LCD_ShowString+0x24>
    }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <LCD_DisplayChar>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
uint8_t  LCD_DisplayChar(uint8_t str){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]

    switch(str){
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3b20      	subs	r3, #32
 8000e26:	2b5e      	cmp	r3, #94	@ 0x5e
 8000e28:	f200 8180 	bhi.w	800112c <LCD_DisplayChar+0x314>
 8000e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <LCD_DisplayChar+0x1c>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	0800110d 	.word	0x0800110d
 8000e38:	080010a9 	.word	0x080010a9
 8000e3c:	080010ad 	.word	0x080010ad
 8000e40:	080010b1 	.word	0x080010b1
 8000e44:	080010b5 	.word	0x080010b5
 8000e48:	080010b9 	.word	0x080010b9
 8000e4c:	080010bd 	.word	0x080010bd
 8000e50:	080010c1 	.word	0x080010c1
 8000e54:	080010c5 	.word	0x080010c5
 8000e58:	080010c9 	.word	0x080010c9
 8000e5c:	080010cd 	.word	0x080010cd
 8000e60:	080010d1 	.word	0x080010d1
 8000e64:	080010d5 	.word	0x080010d5
 8000e68:	080010d9 	.word	0x080010d9
 8000e6c:	08001111 	.word	0x08001111
 8000e70:	080010dd 	.word	0x080010dd
 8000e74:	08000fb1 	.word	0x08000fb1
 8000e78:	08000fb5 	.word	0x08000fb5
 8000e7c:	08000fb9 	.word	0x08000fb9
 8000e80:	08000fbd 	.word	0x08000fbd
 8000e84:	08000fc1 	.word	0x08000fc1
 8000e88:	08000fc5 	.word	0x08000fc5
 8000e8c:	08000fc9 	.word	0x08000fc9
 8000e90:	08000fcd 	.word	0x08000fcd
 8000e94:	08000fd1 	.word	0x08000fd1
 8000e98:	08000fd5 	.word	0x08000fd5
 8000e9c:	080010e1 	.word	0x080010e1
 8000ea0:	080010e5 	.word	0x080010e5
 8000ea4:	080010e9 	.word	0x080010e9
 8000ea8:	080010ed 	.word	0x080010ed
 8000eac:	080010f1 	.word	0x080010f1
 8000eb0:	080010f5 	.word	0x080010f5
 8000eb4:	080010f9 	.word	0x080010f9
 8000eb8:	08001041 	.word	0x08001041
 8000ebc:	08001045 	.word	0x08001045
 8000ec0:	08001049 	.word	0x08001049
 8000ec4:	0800104d 	.word	0x0800104d
 8000ec8:	08001051 	.word	0x08001051
 8000ecc:	08001055 	.word	0x08001055
 8000ed0:	08001059 	.word	0x08001059
 8000ed4:	0800105d 	.word	0x0800105d
 8000ed8:	08001061 	.word	0x08001061
 8000edc:	08001065 	.word	0x08001065
 8000ee0:	08001069 	.word	0x08001069
 8000ee4:	0800106d 	.word	0x0800106d
 8000ee8:	08001071 	.word	0x08001071
 8000eec:	08001075 	.word	0x08001075
 8000ef0:	08001079 	.word	0x08001079
 8000ef4:	0800107d 	.word	0x0800107d
 8000ef8:	08001081 	.word	0x08001081
 8000efc:	08001085 	.word	0x08001085
 8000f00:	08001089 	.word	0x08001089
 8000f04:	0800108d 	.word	0x0800108d
 8000f08:	08001091 	.word	0x08001091
 8000f0c:	08001095 	.word	0x08001095
 8000f10:	08001099 	.word	0x08001099
 8000f14:	0800109d 	.word	0x0800109d
 8000f18:	080010a1 	.word	0x080010a1
 8000f1c:	080010a5 	.word	0x080010a5
 8000f20:	08001121 	.word	0x08001121
 8000f24:	08001125 	.word	0x08001125
 8000f28:	08001129 	.word	0x08001129
 8000f2c:	08001115 	.word	0x08001115
 8000f30:	08001119 	.word	0x08001119
 8000f34:	0800111d 	.word	0x0800111d
 8000f38:	08000fd9 	.word	0x08000fd9
 8000f3c:	08000fdd 	.word	0x08000fdd
 8000f40:	08000fe1 	.word	0x08000fe1
 8000f44:	08000fe5 	.word	0x08000fe5
 8000f48:	08000fe9 	.word	0x08000fe9
 8000f4c:	08000fed 	.word	0x08000fed
 8000f50:	08000ff1 	.word	0x08000ff1
 8000f54:	08000ff5 	.word	0x08000ff5
 8000f58:	08000ff9 	.word	0x08000ff9
 8000f5c:	08000ffd 	.word	0x08000ffd
 8000f60:	08001001 	.word	0x08001001
 8000f64:	08001005 	.word	0x08001005
 8000f68:	08001009 	.word	0x08001009
 8000f6c:	0800100d 	.word	0x0800100d
 8000f70:	08001011 	.word	0x08001011
 8000f74:	08001015 	.word	0x08001015
 8000f78:	08001019 	.word	0x08001019
 8000f7c:	0800101d 	.word	0x0800101d
 8000f80:	08001021 	.word	0x08001021
 8000f84:	08001025 	.word	0x08001025
 8000f88:	08001029 	.word	0x08001029
 8000f8c:	0800102d 	.word	0x0800102d
 8000f90:	08001031 	.word	0x08001031
 8000f94:	08001035 	.word	0x08001035
 8000f98:	08001039 	.word	0x08001039
 8000f9c:	0800103d 	.word	0x0800103d
 8000fa0:	080010fd 	.word	0x080010fd
 8000fa4:	08001101 	.word	0x08001101
 8000fa8:	08001105 	.word	0x08001105
 8000fac:	08001109 	.word	0x08001109
      case '0': return (0); break;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e0bc      	b.n	800112e <LCD_DisplayChar+0x316>
      case '1': return (1); break;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0ba      	b.n	800112e <LCD_DisplayChar+0x316>
      case '2': return (2); break;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e0b8      	b.n	800112e <LCD_DisplayChar+0x316>
      case '3': return (3); break;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0b6      	b.n	800112e <LCD_DisplayChar+0x316>
      case '4': return (4); break;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e0b4      	b.n	800112e <LCD_DisplayChar+0x316>
      case '5': return (5); break;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	e0b2      	b.n	800112e <LCD_DisplayChar+0x316>
      case '6': return (6); break;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	e0b0      	b.n	800112e <LCD_DisplayChar+0x316>
      case '7': return (7); break;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	e0ae      	b.n	800112e <LCD_DisplayChar+0x316>
      case '8': return (8); break;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	e0ac      	b.n	800112e <LCD_DisplayChar+0x316>
      case '9': return (9); break;
 8000fd4:	2309      	movs	r3, #9
 8000fd6:	e0aa      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'a': return (10); break;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	e0a8      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'b': return (11); break;
 8000fdc:	230b      	movs	r3, #11
 8000fde:	e0a6      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'c': return (12); break;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	e0a4      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'd': return (13); break;
 8000fe4:	230d      	movs	r3, #13
 8000fe6:	e0a2      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'e': return (14); break;
 8000fe8:	230e      	movs	r3, #14
 8000fea:	e0a0      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'f': return (15); break;
 8000fec:	230f      	movs	r3, #15
 8000fee:	e09e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'g': return (16); break;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	e09c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'h': return (17); break;
 8000ff4:	2311      	movs	r3, #17
 8000ff6:	e09a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'i': return (18); break;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	e098      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'j': return (19); break;
 8000ffc:	2313      	movs	r3, #19
 8000ffe:	e096      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'k': return (20); break;
 8001000:	2314      	movs	r3, #20
 8001002:	e094      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'l': return (21); break;
 8001004:	2315      	movs	r3, #21
 8001006:	e092      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'm': return (22); break;
 8001008:	2316      	movs	r3, #22
 800100a:	e090      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'n': return (23); break;
 800100c:	2317      	movs	r3, #23
 800100e:	e08e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'o': return (24); break;
 8001010:	2318      	movs	r3, #24
 8001012:	e08c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'p': return (25); break;
 8001014:	2319      	movs	r3, #25
 8001016:	e08a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'q': return (26); break;
 8001018:	231a      	movs	r3, #26
 800101a:	e088      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'r': return (27); break;
 800101c:	231b      	movs	r3, #27
 800101e:	e086      	b.n	800112e <LCD_DisplayChar+0x316>
      case 's': return (28); break;
 8001020:	231c      	movs	r3, #28
 8001022:	e084      	b.n	800112e <LCD_DisplayChar+0x316>
      case 't': return (29); break;
 8001024:	231d      	movs	r3, #29
 8001026:	e082      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'u': return (30); break;
 8001028:	231e      	movs	r3, #30
 800102a:	e080      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'v': return (31); break;
 800102c:	231f      	movs	r3, #31
 800102e:	e07e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'w': return (32); break;
 8001030:	2320      	movs	r3, #32
 8001032:	e07c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'x': return (33); break;
 8001034:	2321      	movs	r3, #33	@ 0x21
 8001036:	e07a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'y': return (34); break;
 8001038:	2322      	movs	r3, #34	@ 0x22
 800103a:	e078      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'z': return (35); break;
 800103c:	2323      	movs	r3, #35	@ 0x23
 800103e:	e076      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'A': return (36); break;
 8001040:	2324      	movs	r3, #36	@ 0x24
 8001042:	e074      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'B': return (37); break;
 8001044:	2325      	movs	r3, #37	@ 0x25
 8001046:	e072      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'C': return (38); break;
 8001048:	2326      	movs	r3, #38	@ 0x26
 800104a:	e070      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'D': return (39); break;
 800104c:	2327      	movs	r3, #39	@ 0x27
 800104e:	e06e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'E': return (40); break;
 8001050:	2328      	movs	r3, #40	@ 0x28
 8001052:	e06c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'F': return (41); break;
 8001054:	2329      	movs	r3, #41	@ 0x29
 8001056:	e06a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'G': return (42); break;
 8001058:	232a      	movs	r3, #42	@ 0x2a
 800105a:	e068      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'H': return (43); break;
 800105c:	232b      	movs	r3, #43	@ 0x2b
 800105e:	e066      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'I': return (44); break;
 8001060:	232c      	movs	r3, #44	@ 0x2c
 8001062:	e064      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'J': return (45); break;
 8001064:	232d      	movs	r3, #45	@ 0x2d
 8001066:	e062      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'K': return (46); break;
 8001068:	232e      	movs	r3, #46	@ 0x2e
 800106a:	e060      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'L': return (47); break;
 800106c:	232f      	movs	r3, #47	@ 0x2f
 800106e:	e05e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'M': return (48); break;
 8001070:	2330      	movs	r3, #48	@ 0x30
 8001072:	e05c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'N': return (49); break;
 8001074:	2331      	movs	r3, #49	@ 0x31
 8001076:	e05a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'O': return (50); break;
 8001078:	2332      	movs	r3, #50	@ 0x32
 800107a:	e058      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'P': return (51); break;
 800107c:	2333      	movs	r3, #51	@ 0x33
 800107e:	e056      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'Q': return (52); break;
 8001080:	2334      	movs	r3, #52	@ 0x34
 8001082:	e054      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'R': return (53); break;
 8001084:	2335      	movs	r3, #53	@ 0x35
 8001086:	e052      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'S': return (54); break;
 8001088:	2336      	movs	r3, #54	@ 0x36
 800108a:	e050      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'T': return (55); break;
 800108c:	2337      	movs	r3, #55	@ 0x37
 800108e:	e04e      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'U': return (56); break;
 8001090:	2338      	movs	r3, #56	@ 0x38
 8001092:	e04c      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'V': return (57); break;
 8001094:	2339      	movs	r3, #57	@ 0x39
 8001096:	e04a      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'W': return (58); break;
 8001098:	233a      	movs	r3, #58	@ 0x3a
 800109a:	e048      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'X': return (59); break;
 800109c:	233b      	movs	r3, #59	@ 0x3b
 800109e:	e046      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'Y': return (60); break;
 80010a0:	233c      	movs	r3, #60	@ 0x3c
 80010a2:	e044      	b.n	800112e <LCD_DisplayChar+0x316>
      case 'Z': return (61); break;
 80010a4:	233d      	movs	r3, #61	@ 0x3d
 80010a6:	e042      	b.n	800112e <LCD_DisplayChar+0x316>
      case '!': return (62); break;
 80010a8:	233e      	movs	r3, #62	@ 0x3e
 80010aa:	e040      	b.n	800112e <LCD_DisplayChar+0x316>
      case '"': return (63); break;
 80010ac:	233f      	movs	r3, #63	@ 0x3f
 80010ae:	e03e      	b.n	800112e <LCD_DisplayChar+0x316>
      case '#': return (64); break;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	e03c      	b.n	800112e <LCD_DisplayChar+0x316>
      case '$': return (65); break;
 80010b4:	2341      	movs	r3, #65	@ 0x41
 80010b6:	e03a      	b.n	800112e <LCD_DisplayChar+0x316>
      case '%': return (66); break;
 80010b8:	2342      	movs	r3, #66	@ 0x42
 80010ba:	e038      	b.n	800112e <LCD_DisplayChar+0x316>
      case '&': return (67); break;
 80010bc:	2343      	movs	r3, #67	@ 0x43
 80010be:	e036      	b.n	800112e <LCD_DisplayChar+0x316>
      case '\'': return (68); break;
 80010c0:	2344      	movs	r3, #68	@ 0x44
 80010c2:	e034      	b.n	800112e <LCD_DisplayChar+0x316>
      case '(': return (69); break;
 80010c4:	2345      	movs	r3, #69	@ 0x45
 80010c6:	e032      	b.n	800112e <LCD_DisplayChar+0x316>
      case ')': return (70); break;
 80010c8:	2346      	movs	r3, #70	@ 0x46
 80010ca:	e030      	b.n	800112e <LCD_DisplayChar+0x316>
      case '*': return (71); break;
 80010cc:	2347      	movs	r3, #71	@ 0x47
 80010ce:	e02e      	b.n	800112e <LCD_DisplayChar+0x316>
      case '+': return (72); break;
 80010d0:	2348      	movs	r3, #72	@ 0x48
 80010d2:	e02c      	b.n	800112e <LCD_DisplayChar+0x316>
      case ',': return (73); break;
 80010d4:	2349      	movs	r3, #73	@ 0x49
 80010d6:	e02a      	b.n	800112e <LCD_DisplayChar+0x316>
      case '-': return (74); break;
 80010d8:	234a      	movs	r3, #74	@ 0x4a
 80010da:	e028      	b.n	800112e <LCD_DisplayChar+0x316>
      case '/': return (75); break;
 80010dc:	234b      	movs	r3, #75	@ 0x4b
 80010de:	e026      	b.n	800112e <LCD_DisplayChar+0x316>
      case ':': return (76); break;
 80010e0:	234c      	movs	r3, #76	@ 0x4c
 80010e2:	e024      	b.n	800112e <LCD_DisplayChar+0x316>
      case ';': return (77); break;
 80010e4:	234d      	movs	r3, #77	@ 0x4d
 80010e6:	e022      	b.n	800112e <LCD_DisplayChar+0x316>
      case '<': return (78); break;
 80010e8:	234e      	movs	r3, #78	@ 0x4e
 80010ea:	e020      	b.n	800112e <LCD_DisplayChar+0x316>
      case '=': return (79); break;
 80010ec:	234f      	movs	r3, #79	@ 0x4f
 80010ee:	e01e      	b.n	800112e <LCD_DisplayChar+0x316>
      case '>': return (80); break;
 80010f0:	2350      	movs	r3, #80	@ 0x50
 80010f2:	e01c      	b.n	800112e <LCD_DisplayChar+0x316>
      case '?': return (81); break;
 80010f4:	2351      	movs	r3, #81	@ 0x51
 80010f6:	e01a      	b.n	800112e <LCD_DisplayChar+0x316>
      case '@': return (82); break;
 80010f8:	2352      	movs	r3, #82	@ 0x52
 80010fa:	e018      	b.n	800112e <LCD_DisplayChar+0x316>
      case '{': return (83); break;
 80010fc:	2353      	movs	r3, #83	@ 0x53
 80010fe:	e016      	b.n	800112e <LCD_DisplayChar+0x316>
      case '|': return (84); break;
 8001100:	2354      	movs	r3, #84	@ 0x54
 8001102:	e014      	b.n	800112e <LCD_DisplayChar+0x316>
      case '}': return (85); break;
 8001104:	2355      	movs	r3, #85	@ 0x55
 8001106:	e012      	b.n	800112e <LCD_DisplayChar+0x316>
      case '~': return (86); break;
 8001108:	2356      	movs	r3, #86	@ 0x56
 800110a:	e010      	b.n	800112e <LCD_DisplayChar+0x316>
      case ' ': return (87); break;
 800110c:	2357      	movs	r3, #87	@ 0x57
 800110e:	e00e      	b.n	800112e <LCD_DisplayChar+0x316>
      case '.': return (88); break;
 8001110:	2358      	movs	r3, #88	@ 0x58
 8001112:	e00c      	b.n	800112e <LCD_DisplayChar+0x316>
      case '^': return (89); break;
 8001114:	2359      	movs	r3, #89	@ 0x59
 8001116:	e00a      	b.n	800112e <LCD_DisplayChar+0x316>
      case '_': return (90); break;
 8001118:	235a      	movs	r3, #90	@ 0x5a
 800111a:	e008      	b.n	800112e <LCD_DisplayChar+0x316>
      case '`': return (91); break;
 800111c:	235b      	movs	r3, #91	@ 0x5b
 800111e:	e006      	b.n	800112e <LCD_DisplayChar+0x316>
      case '[': return (92); break;
 8001120:	235c      	movs	r3, #92	@ 0x5c
 8001122:	e004      	b.n	800112e <LCD_DisplayChar+0x316>
      case '\\': return (93); break;
 8001124:	235d      	movs	r3, #93	@ 0x5d
 8001126:	e002      	b.n	800112e <LCD_DisplayChar+0x316>
      case ']': return (94); break;
 8001128:	235e      	movs	r3, #94	@ 0x5e
 800112a:	e000      	b.n	800112e <LCD_DisplayChar+0x316>
      default: break;
 800112c:	bf00      	nop
  }
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <LCD_ReverseMode>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_ReverseMode(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	ks0713_WriteCommand(KS0713_DISP_MODE_REVERSE);
 8001140:	20a7      	movs	r0, #167	@ 0xa7
 8001142:	f000 f82f 	bl	80011a4 <ks0713_WriteCommand>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <LCD_NormalMode>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_NormalMode(void){
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
	ks0713_WriteCommand(KS0713_DISP_MODE_NORMAL);
 800114e:	20a6      	movs	r0, #166	@ 0xa6
 8001150:	f000 f828 	bl	80011a4 <ks0713_WriteCommand>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ks0713_WriteData>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void ks0713_WriteData(uint16_t DataValue){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2120      	movs	r1, #32
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <ks0713_WriteData+0x44>)
 8001168:	f001 f830 	bl	80021cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_SPI_CS_GPIO_Port, LCD_SPI_CS_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2110      	movs	r1, #16
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <ks0713_WriteData+0x48>)
 8001172:	f001 f82b 	bl	80021cc <HAL_GPIO_WritePin>
	SPI_Write(DataValue);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f865 	bl	8001248 <SPI_Write>
	HAL_GPIO_WritePin(LCD_SPI_CS_GPIO_Port, LCD_SPI_CS_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <ks0713_WriteData+0x48>)
 8001184:	f001 f822 	bl	80021cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2120      	movs	r1, #32
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <ks0713_WriteData+0x44>)
 800118e:	f001 f81d 	bl	80021cc <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <ks0713_WriteCommand>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void ks0713_WriteCommand( uint8_t CommandValue){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <ks0713_WriteCommand+0x44>)
 80011b4:	f001 f80a 	bl	80021cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_SPI_CS_GPIO_Port, LCD_SPI_CS_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2110      	movs	r1, #16
 80011bc:	480b      	ldr	r0, [pc, #44]	@ (80011ec <ks0713_WriteCommand+0x48>)
 80011be:	f001 f805 	bl	80021cc <HAL_GPIO_WritePin>
    SPI_Write(CommandValue);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f83e 	bl	8001248 <SPI_Write>
    HAL_GPIO_WritePin(LCD_SPI_CS_GPIO_Port, LCD_SPI_CS_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2110      	movs	r1, #16
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <ks0713_WriteCommand+0x48>)
 80011d2:	f000 fffb 	bl	80021cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2120      	movs	r1, #32
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <ks0713_WriteCommand+0x44>)
 80011dc:	f000 fff6 	bl	80021cc <HAL_GPIO_WritePin>

}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020000 	.word	0x40020000

080011f0 <LCD_Gotoxy>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void LCD_Gotoxy(uint8_t x, uint8_t y){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	460a      	mov	r2, r1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	4613      	mov	r3, r2
 80011fe:	71bb      	strb	r3, [r7, #6]
  char hi_col,lo_col;
  uint8_t PageADDR = 0 ;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
  lo_col= (x&0x0f);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	73bb      	strb	r3, [r7, #14]
  hi_col= ((x>>4)&0x0f)|0x10;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b25b      	sxtb	r3, r3
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	b25b      	sxtb	r3, r3
 800121a:	737b      	strb	r3, [r7, #13]
  PageADDR=(y/8);
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	73fb      	strb	r3, [r7, #15]
  ks0713_WriteCommand(hi_col);
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffbd 	bl	80011a4 <ks0713_WriteCommand>
  ks0713_WriteCommand(lo_col);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ffb9 	bl	80011a4 <ks0713_WriteCommand>
  ks0713_WriteCommand(KS0713_SET_PAGE_ADDR + PageADDR);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	3b50      	subs	r3, #80	@ 0x50
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ffb3 	bl	80011a4 <ks0713_WriteCommand>
  }
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <SPI_Write>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void SPI_Write(uint16_t Value){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
    status = HAL_SPI_Transmit(&hspi1, (uint8_t*) &Value, 1, SPI_TIMEOUT_MAX);
 8001256:	1db9      	adds	r1, r7, #6
 8001258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125c:	2201      	movs	r2, #1
 800125e:	4807      	ldr	r0, [pc, #28]	@ (800127c <SPI_Write+0x34>)
 8001260:	f001 fd35 	bl	8002cce <HAL_SPI_Transmit>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SPI_Write+0x2a>
    {
      SPI_Error();
 800126e:	f000 f807 	bl	8001280 <SPI_Error>
    }
  }
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000084 	.word	0x20000084

08001280 <SPI_Error>:
/*
 * ******************************************************************************************************
 *
 * ******************************************************************************************************
 */
void SPI_Error(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    HAL_SPI_DeInit(&hspi1);
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <SPI_Error+0x14>)
 8001286:	f001 fcfa 	bl	8002c7e <HAL_SPI_DeInit>
    HAL_SPI_Init(&hspi1);
 800128a:	4802      	ldr	r0, [pc, #8]	@ (8001294 <SPI_Error+0x14>)
 800128c:	f001 fc6e 	bl	8002b6c <HAL_SPI_Init>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000084 	.word	0x20000084

08001298 <LCD_IO_Init>:
  /*
   * ******************************************************************************************************
   *
   * ******************************************************************************************************
   */
void LCD_IO_Init(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    /*Reset the control line */
    LCD_Delay(15);
 800129c:	200f      	movs	r0, #15
 800129e:	f000 f817 	bl	80012d0 <LCD_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2140      	movs	r1, #64	@ 0x40
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <LCD_IO_Init+0x34>)
 80012a8:	f000 ff90 	bl	80021cc <HAL_GPIO_WritePin>
    LCD_Delay(15);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f000 f80f 	bl	80012d0 <LCD_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2140      	movs	r1, #64	@ 0x40
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <LCD_IO_Init+0x34>)
 80012b8:	f000 ff88 	bl	80021cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_SPI_CS_GPIO_Port, LCD_SPI_CS_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2110      	movs	r1, #16
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <LCD_IO_Init+0x34>)
 80012c2:	f000 ff83 	bl	80021cc <HAL_GPIO_WritePin>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40020000 	.word	0x40020000

080012d0 <LCD_Delay>:
  /*
   * ******************************************************************************************************
   *
   * ******************************************************************************************************
   */
void LCD_Delay(uint32_t Delay){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    HAL_Delay(Delay);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fbd9 	bl	8001a90 <HAL_Delay>
  }
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f000 fb8f 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f811 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f2:	f000 f8b1 	bl	8001458 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012f6:	f000 f877 	bl	80013e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ks0713_init ();
 80012fa:	f7ff f957 	bl	80005ac <ks0713_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 LCD_NormalMode();
 80012fe:	f7ff ff24 	bl	800114a <LCD_NormalMode>
	 LCD_DemoMode();
 8001302:	f7ff f995 	bl	8000630 <LCD_DemoMode>
	 LCD_ReverseMode();
 8001306:	f7ff ff19 	bl	800113c <LCD_ReverseMode>
	 LCD_DemoMode();
 800130a:	f7ff f991 	bl	8000630 <LCD_DemoMode>
	 LCD_NormalMode();
 800130e:	bf00      	nop
 8001310:	e7f5      	b.n	80012fe <main+0x18>
	...

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	@ 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	@ 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fad9 	bl	80038da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <SystemClock_Config+0xcc>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <SystemClock_Config+0xcc>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	@ 0x40
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <SystemClock_Config+0xd0>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001384:	2304      	movs	r3, #4
 8001386:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001388:	23a8      	movs	r3, #168	@ 0xa8
 800138a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001390:	2307      	movs	r3, #7
 8001392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f000 ff31 	bl	8002200 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013a4:	f000 f8d0 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2105      	movs	r1, #5
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f992 	bl	80026f0 <HAL_RCC_ClockConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013d2:	f000 f8b9 	bl	8001548 <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	@ 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000

080013e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_SPI1_Init+0x68>)
 80013ee:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <MX_SPI1_Init+0x6c>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_SPI1_Init+0x68>)
 80013f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_SPI1_Init+0x68>)
 80013fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001400:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_SPI1_Init+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_SPI1_Init+0x68>)
 800141e:	2210      	movs	r2, #16
 8001420:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_SPI1_Init+0x68>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_SPI1_Init+0x68>)
 8001436:	220a      	movs	r2, #10
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_SPI1_Init+0x68>)
 800143c:	f001 fb96 	bl	8002b6c <HAL_SPI_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001446:	f000 f87f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000084 	.word	0x20000084
 8001454:	40013000 	.word	0x40013000

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <MX_GPIO_Init+0xc0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <MX_GPIO_Init+0xc0>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <MX_GPIO_Init+0xc0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_GPIO_Init+0xc0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <MX_GPIO_Init+0xc0>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <MX_GPIO_Init+0xc0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_GPIO_Init+0xc0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <MX_GPIO_Init+0xc0>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_GPIO_Init+0xc0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_SPI_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2150      	movs	r1, #80	@ 0x50
 80014c6:	4815      	ldr	r0, [pc, #84]	@ (800151c <MX_GPIO_Init+0xc4>)
 80014c8:	f000 fe80 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2120      	movs	r1, #32
 80014d0:	4813      	ldr	r0, [pc, #76]	@ (8001520 <MX_GPIO_Init+0xc8>)
 80014d2:	f000 fe7b 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_SPI_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_SPI_CS_Pin|LCD_RST_Pin;
 80014d6:	2350      	movs	r3, #80	@ 0x50
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	480b      	ldr	r0, [pc, #44]	@ (800151c <MX_GPIO_Init+0xc4>)
 80014ee:	f000 fbd5 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80014f2:	2320      	movs	r3, #32
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_GPIO_Init+0xc8>)
 800150a:	f000 fbc7 	bl	8001c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020800 	.word	0x40020800

08001524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001536:	f000 fa8b 	bl	8001a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001592:	2007      	movs	r0, #7
 8001594:	f000 fb4d 	bl	8001c32 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_SPI_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_SPI_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015fe:	23a0      	movs	r3, #160	@ 0xa0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160e:	2305      	movs	r3, #5
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_SPI_MspInit+0x8c>)
 800161a:	f000 fb3f 	bl	8001c9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40013000 	.word	0x40013000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_SPI_MspDeInit+0x30>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d109      	bne.n	800165a <HAL_SPI_MspDeInit+0x26>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_SPI_MspDeInit+0x34>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <HAL_SPI_MspDeInit+0x34>)
 800164c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8001652:	21a0      	movs	r1, #160	@ 0xa0
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_SPI_MspDeInit+0x38>)
 8001656:	f000 fcbd 	bl	8001fd4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40013000 	.word	0x40013000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_InitTick+0xe4>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <HAL_InitTick+0xe4>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <HAL_InitTick+0xe4>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169c:	f107 0210 	add.w	r2, r7, #16
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fa2e 	bl	8002b08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016b6:	f001 fa13 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80016ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80016bc:	e004      	b.n	80016c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016be:	f001 fa0f 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ca:	4a23      	ldr	r2, [pc, #140]	@ (8001758 <HAL_InitTick+0xe8>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	3b01      	subs	r3, #1
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_InitTick+0xec>)
 80016d8:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <HAL_InitTick+0xf0>)
 80016da:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_InitTick+0xec>)
 80016de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_InitTick+0xec>)
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <HAL_InitTick+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_InitTick+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_InitTick+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016fc:	4817      	ldr	r0, [pc, #92]	@ (800175c <HAL_InitTick+0xec>)
 80016fe:	f001 fd07 	bl	8003110 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001708:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11b      	bne.n	8001748 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001710:	4812      	ldr	r0, [pc, #72]	@ (800175c <HAL_InitTick+0xec>)
 8001712:	f001 fd57 	bl	80031c4 <HAL_TIM_Base_Start_IT>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800171c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001724:	2036      	movs	r0, #54	@ 0x36
 8001726:	f000 faab 	bl	8001c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d808      	bhi.n	8001742 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	2036      	movs	r0, #54	@ 0x36
 8001736:	f000 fa87 	bl	8001c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_InitTick+0xf4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e002      	b.n	8001748 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001748:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800174c:	4618      	mov	r0, r3
 800174e:	3738      	adds	r7, #56	@ 0x38
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	431bde83 	.word	0x431bde83
 800175c:	200000dc 	.word	0x200000dc
 8001760:	40001000 	.word	0x40001000
 8001764:	20000004 	.word	0x20000004

08001768 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <__NVIC_SystemReset+0x24>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800177a:	4904      	ldr	r1, [pc, #16]	@ (800178c <__NVIC_SystemReset+0x24>)
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <__NVIC_SystemReset+0x28>)
 800177e:	4313      	orrs	r3, r2
 8001780:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001782:	f3bf 8f4f 	dsb	sy
}
 8001786:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <__NVIC_SystemReset+0x20>
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	05fa0004 	.word	0x05fa0004

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80017a0:	f7ff ffe2 	bl	8001768 <__NVIC_SystemReset>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM6_DAC_IRQHandler+0x10>)
 80017fa:	f001 fd53 	bl	80032a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000dc 	.word	0x200000dc

08001808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_kill>:

int _kill(int pid, int sig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001822:	f002 f8a9 	bl	8003978 <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	2216      	movs	r2, #22
 800182a:	601a      	str	r2, [r3, #0]
  return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_exit>:

void _exit (int status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffe7 	bl	8001818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800184a:	bf00      	nop
 800184c:	e7fd      	b.n	800184a <_exit+0x12>

0800184e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e00a      	b.n	8001876 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001860:	f3af 8000 	nop.w
 8001864:	4601      	mov	r1, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	b2ca      	uxtb	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbf0      	blt.n	8001860 <_read+0x12>
  }

  return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e009      	b.n	80018ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbf1      	blt.n	800189a <_write+0x12>
  }
  return len;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_close>:

int _close(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f002 f80e 	bl	8003978 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20020000 	.word	0x20020000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000124 	.word	0x20000124
 8001990:	20000278 	.word	0x20000278

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019bc:	f7ff ffea 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f001 ffcd 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff fc7c 	bl	80012e6 <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019fc:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 8001a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a04:	20000278 	.word	0x20000278

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f8fc 	bl	8001c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fe18 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fd88 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000128 	.word	0x20000128

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000128 	.word	0x20000128

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <__NVIC_SetPriorityGrouping>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff4c 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5a:	f7ff ff61 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	6978      	ldr	r0, [r7, #20]
 8001c66:	f7ff ffb1 	bl	8001bcc <NVIC_EncodePriority>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff80 	bl	8001b78 <__NVIC_SetPriority>
}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff54 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e16b      	b.n	8001f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 815a 	bne.w	8001f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80b4 	beq.w	8001f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b60      	ldr	r3, [pc, #384]	@ (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fac <HAL_GPIO_Init+0x310>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_GPIO_Init+0x314>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02b      	beq.n	8001ec2 <HAL_GPIO_Init+0x226>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	@ (8001fb4 <HAL_GPIO_Init+0x318>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x222>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_GPIO_Init+0x31c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x21e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fbc <HAL_GPIO_Init+0x320>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x21a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x216>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_GPIO_Init+0x328>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x212>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x32c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fcc <HAL_GPIO_Init+0x330>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x20a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e00e      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	e00c      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001eaa:	2306      	movs	r3, #6
 8001eac:	e00a      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001eae:	2305      	movs	r3, #5
 8001eb0:	e008      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e004      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e002      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	f002 0203 	and.w	r2, r2, #3
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed4:	4935      	ldr	r1, [pc, #212]	@ (8001fac <HAL_GPIO_Init+0x310>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f06:	4a32      	ldr	r2, [pc, #200]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f0c:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f30:	4a27      	ldr	r2, [pc, #156]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f36:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <HAL_GPIO_Init+0x334>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	f67f ae90 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40021400 	.word	0x40021400
 8001fc8:	40021800 	.word	0x40021800
 8001fcc:	40021c00 	.word	0x40021c00
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e0cd      	b.n	800218c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	429a      	cmp	r2, r3
 8002008:	f040 80bd 	bne.w	8002186 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800200c:	4a65      	ldr	r2, [pc, #404]	@ (80021a4 <HAL_GPIO_DeInit+0x1d0>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4013      	ands	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a5d      	ldr	r2, [pc, #372]	@ (80021a8 <HAL_GPIO_DeInit+0x1d4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_DeInit+0xba>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a5c      	ldr	r2, [pc, #368]	@ (80021ac <HAL_GPIO_DeInit+0x1d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_DeInit+0xb6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a5b      	ldr	r2, [pc, #364]	@ (80021b0 <HAL_GPIO_DeInit+0x1dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_DeInit+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a5a      	ldr	r2, [pc, #360]	@ (80021b4 <HAL_GPIO_DeInit+0x1e0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_DeInit+0xae>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a59      	ldr	r2, [pc, #356]	@ (80021b8 <HAL_GPIO_DeInit+0x1e4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_DeInit+0xaa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <HAL_GPIO_DeInit+0x1e8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_DeInit+0xa6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a57      	ldr	r2, [pc, #348]	@ (80021c0 <HAL_GPIO_DeInit+0x1ec>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_DeInit+0xa2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a56      	ldr	r2, [pc, #344]	@ (80021c4 <HAL_GPIO_DeInit+0x1f0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_DeInit+0x9e>
 800206e:	2307      	movs	r3, #7
 8002070:	e00e      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 8002072:	2308      	movs	r3, #8
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_DeInit+0xbc>
 800208e:	2300      	movs	r3, #0
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d132      	bne.n	8002106 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020a0:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4947      	ldr	r1, [pc, #284]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020ae:	4b46      	ldr	r3, [pc, #280]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4944      	ldr	r1, [pc, #272]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020bc:	4b42      	ldr	r3, [pc, #264]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4940      	ldr	r1, [pc, #256]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020ca:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	493d      	ldr	r1, [pc, #244]	@ (80021c8 <HAL_GPIO_DeInit+0x1f4>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020e8:	4a2e      	ldr	r2, [pc, #184]	@ (80021a4 <HAL_GPIO_DeInit+0x1d0>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	482a      	ldr	r0, [pc, #168]	@ (80021a4 <HAL_GPIO_DeInit+0x1d0>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	400a      	ands	r2, r1
 8002100:	3302      	adds	r3, #2
 8002102:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2103      	movs	r1, #3
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	08d2      	lsrs	r2, r2, #3
 800213c:	4019      	ands	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2103      	movs	r1, #3
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	401a      	ands	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2101      	movs	r1, #1
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2103      	movs	r1, #3
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	401a      	ands	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f af2e 	bls.w	8001ff0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e267      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b85      	ldr	r3, [pc, #532]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002232:	2b08      	cmp	r3, #8
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b82      	ldr	r3, [pc, #520]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b7e      	ldr	r3, [pc, #504]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e242      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b70      	ldr	r3, [pc, #448]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6c      	ldr	r2, [pc, #432]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b66      	ldr	r3, [pc, #408]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a65      	ldr	r2, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fbde 	bl	8001a78 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fbda 	bl	8001a78 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e207      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fbca 	bl	8001a78 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fbc6 	bl	8001a78 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1f3      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002316:	4b4a      	ldr	r3, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b44      	ldr	r3, [pc, #272]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff fb7f 	bl	8001a78 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff fb7b 	bl	8001a78 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a8      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4925      	ldr	r1, [pc, #148]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff fb5e 	bl	8001a78 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff fb5a 	bl	8001a78 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e187      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff fb3e 	bl	8001a78 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff fb3a 	bl	8001a78 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e167      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
 800241e:	e01b      	b.n	8002458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff fb27 	bl	8001a78 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00e      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7ff fb23 	bl	8001a78 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d907      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e150      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ea      	bne.n	800242e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b81      	ldr	r3, [pc, #516]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b7d      	ldr	r3, [pc, #500]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a7c      	ldr	r2, [pc, #496]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b7a      	ldr	r3, [pc, #488]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b77      	ldr	r3, [pc, #476]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fae3 	bl	8001a78 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff fadf 	bl	8001a78 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e10c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x2ea>
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e0:	4a63      	ldr	r2, [pc, #396]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x30c>
 80024f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 800250c:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	@ 0x70
 8002518:	4b55      	ldr	r3, [pc, #340]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	4a54      	ldr	r2, [pc, #336]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff faa4 	bl	8001a78 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff faa0 	bl	8001a78 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0cb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x334>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fa8e 	bl	8001a78 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7ff fa8a 	bl	8001a78 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a1 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d05c      	beq.n	8002664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d141      	bne.n	8002636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fa5e 	bl	8001a78 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff fa5a 	bl	8001a78 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e087      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	491b      	ldr	r1, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fa33 	bl	8001a78 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff fa2f 	bl	8001a78 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e05c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x416>
 8002634:	e054      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fa1c 	bl	8001a78 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff fa18 	bl	8001a78 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e038      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
 8002678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x4ec>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d028      	beq.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7ff f94a 	bl	8001a78 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7ff f946 	bl	8001a78 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe feea 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080056c8 	.word	0x080056c8
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b094      	sub	sp, #80	@ 0x50
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b79      	ldr	r3, [pc, #484]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80e1 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e0db      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f4:	e0db      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b73      	ldr	r3, [pc, #460]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fa:	e0d8      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002904:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b6d      	ldr	r3, [pc, #436]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b6a      	ldr	r3, [pc, #424]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	633b      	str	r3, [r7, #48]	@ 0x30
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	@ 0x34
 800292a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	6139      	str	r1, [r7, #16]
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002960:	4659      	mov	r1, fp
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4651      	mov	r1, sl
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4651      	mov	r1, sl
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4651      	mov	r1, sl
 8002970:	ebb2 0801 	subs.w	r8, r2, r1
 8002974:	4659      	mov	r1, fp
 8002976:	eb63 0901 	sbc.w	r9, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb18 0303 	adds.w	r3, r8, r3
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	462b      	mov	r3, r5
 800299c:	eb49 0303 	adc.w	r3, r9, r3
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ae:	4629      	mov	r1, r5
 80029b0:	024b      	lsls	r3, r1, #9
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b8:	4621      	mov	r1, r4
 80029ba:	024a      	lsls	r2, r1, #9
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c2:	2200      	movs	r2, #0
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029cc:	f7fd fc58 	bl	8000280 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d8:	e058      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	4611      	mov	r1, r2
 80029e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0159      	lsls	r1, r3, #5
 8002a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a06:	0150      	lsls	r0, r2, #5
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a30:	eb63 050b 	sbc.w	r5, r3, fp
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a76:	2200      	movs	r2, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	61fa      	str	r2, [r7, #28]
 8002a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a80:	f7fd fbfe 	bl	8000280 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3750      	adds	r7, #80	@ 0x50
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	080056d8 	.word	0x080056d8

08002b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	220f      	movs	r2, #15
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b3c:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <HAL_RCC_GetClockConfig+0x60>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07b      	b.n	8002c76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b8e:	d009      	beq.n	8002ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	e005      	b.n	8002ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fcf0 	bl	80015a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0104 	and.w	r1, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	f003 0210 	and.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e01a      	b.n	8002cc6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ca6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fe fcc3 	bl	8001634 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b088      	sub	sp, #32
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cde:	f7fe fecb 	bl	8001a78 <HAL_GetTick>
 8002ce2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e12a      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0x36>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e122      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_Transmit+0x48>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e11b      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d64:	d10f      	bne.n	8002d86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d90:	2b40      	cmp	r3, #64	@ 0x40
 8002d92:	d007      	beq.n	8002da4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dac:	d152      	bne.n	8002e54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_SPI_Transmit+0xee>
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d145      	bne.n	8002e48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002de0:	e032      	b.n	8002e48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d112      	bne.n	8002e16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e14:	e018      	b.n	8002e48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e16:	f7fe fe2f 	bl	8001a78 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d803      	bhi.n	8002e2e <HAL_SPI_Transmit+0x160>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d102      	bne.n	8002e34 <HAL_SPI_Transmit+0x166>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e082      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1c7      	bne.n	8002de2 <HAL_SPI_Transmit+0x114>
 8002e52:	e053      	b.n	8002efc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_SPI_Transmit+0x194>
 8002e5c:	8b7b      	ldrh	r3, [r7, #26]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d147      	bne.n	8002ef2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e88:	e033      	b.n	8002ef2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d113      	bne.n	8002ec0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ebe:	e018      	b.n	8002ef2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec0:	f7fe fdda 	bl	8001a78 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d803      	bhi.n	8002ed8 <HAL_SPI_Transmit+0x20a>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d102      	bne.n	8002ede <HAL_SPI_Transmit+0x210>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e02d      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1c6      	bne.n	8002e8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f8b1 	bl	8003068 <SPI_EndRxTxTransaction>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f68:	f7fe fd86 	bl	8001a78 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f78:	f7fe fd7e 	bl	8001a78 <HAL_GetTick>
 8002f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	0d1b      	lsrs	r3, r3, #20
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f8e:	e054      	b.n	800303a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d050      	beq.n	800303a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f98:	f7fe fd6e 	bl	8001a78 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d902      	bls.n	8002fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d13d      	bne.n	800302a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc6:	d111      	bne.n	8002fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd0:	d004      	beq.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d107      	bne.n	8002fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff4:	d10f      	bne.n	8003016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e017      	b.n	800305a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3b01      	subs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	429a      	cmp	r2, r3
 8003056:	d19b      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2201      	movs	r2, #1
 800307c:	2102      	movs	r1, #2
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff6a 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e032      	b.n	8003100 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <SPI_EndRxTxTransaction+0xa0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <SPI_EndRxTxTransaction+0xa4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0d5b      	lsrs	r3, r3, #21
 80030a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b8:	d112      	bne.n	80030e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	@ 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff ff47 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e00f      	b.n	8003100 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d0f2      	beq.n	80030e0 <SPI_EndRxTxTransaction+0x78>
 80030fa:	e000      	b.n	80030fe <SPI_EndRxTxTransaction+0x96>
        break;
 80030fc:	bf00      	nop
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000000 	.word	0x20000000
 800310c:	165e9f81 	.word	0x165e9f81

08003110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e041      	b.n	80031a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f839 	bl	80031ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f000 f9c0 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e04e      	b.n	800327a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <HAL_TIM_Base_Start_IT+0xc4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003206:	d01d      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <HAL_TIM_Base_Start_IT+0xc8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_TIM_Base_Start_IT+0xcc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <HAL_TIM_Base_Start_IT+0xd0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <HAL_TIM_Base_Start_IT+0xd4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a19      	ldr	r2, [pc, #100]	@ (800329c <HAL_TIM_Base_Start_IT+0xd8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d010      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e007      	b.n	8003278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40001800 	.word	0x40001800

080032a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d020      	beq.n	8003308 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0202 	mvn.w	r2, #2
 80032d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8d2 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8c4 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8d5 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0204 	mvn.w	r2, #4
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8ac 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f89e 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8af 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0208 	mvn.w	r2, #8
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2204      	movs	r2, #4
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f886 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f878 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f889 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0210 	mvn.w	r2, #16
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2208      	movs	r2, #8
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f860 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f852 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f863 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0201 	mvn.w	r2, #1
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe f88a 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f906 	bl	8003640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f834 	bl	80034c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0220 	mvn.w	r2, #32
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8d8 	bl	800362c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a46      	ldr	r2, [pc, #280]	@ (8003600 <TIM_Base_SetConfig+0x12c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a43      	ldr	r2, [pc, #268]	@ (8003604 <TIM_Base_SetConfig+0x130>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a42      	ldr	r2, [pc, #264]	@ (8003608 <TIM_Base_SetConfig+0x134>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a41      	ldr	r2, [pc, #260]	@ (800360c <TIM_Base_SetConfig+0x138>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a40      	ldr	r2, [pc, #256]	@ (8003610 <TIM_Base_SetConfig+0x13c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a35      	ldr	r2, [pc, #212]	@ (8003600 <TIM_Base_SetConfig+0x12c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003534:	d027      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a32      	ldr	r2, [pc, #200]	@ (8003604 <TIM_Base_SetConfig+0x130>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d023      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a31      	ldr	r2, [pc, #196]	@ (8003608 <TIM_Base_SetConfig+0x134>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a30      	ldr	r2, [pc, #192]	@ (800360c <TIM_Base_SetConfig+0x138>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2f      	ldr	r2, [pc, #188]	@ (8003610 <TIM_Base_SetConfig+0x13c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2e      	ldr	r2, [pc, #184]	@ (8003614 <TIM_Base_SetConfig+0x140>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <TIM_Base_SetConfig+0x144>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <TIM_Base_SetConfig+0x148>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	@ (8003620 <TIM_Base_SetConfig+0x14c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2a      	ldr	r2, [pc, #168]	@ (8003624 <TIM_Base_SetConfig+0x150>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a29      	ldr	r2, [pc, #164]	@ (8003628 <TIM_Base_SetConfig+0x154>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a10      	ldr	r2, [pc, #64]	@ (8003600 <TIM_Base_SetConfig+0x12c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a12      	ldr	r2, [pc, #72]	@ (8003610 <TIM_Base_SetConfig+0x13c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]
  }
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40010400 	.word	0x40010400
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800
 8003620:	40001800 	.word	0x40001800
 8003624:	40001c00 	.word	0x40001c00
 8003628:	40002000 	.word	0x40002000

0800362c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <random>:
 8003654:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <random+0x5c>)
 8003656:	b510      	push	{r4, lr}
 8003658:	681c      	ldr	r4, [r3, #0]
 800365a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800365c:	b9b3      	cbnz	r3, 800368c <random+0x38>
 800365e:	2018      	movs	r0, #24
 8003660:	f000 fa20 	bl	8003aa4 <malloc>
 8003664:	4602      	mov	r2, r0
 8003666:	6320      	str	r0, [r4, #48]	@ 0x30
 8003668:	b920      	cbnz	r0, 8003674 <random+0x20>
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <random+0x60>)
 800366c:	4812      	ldr	r0, [pc, #72]	@ (80036b8 <random+0x64>)
 800366e:	214c      	movs	r1, #76	@ 0x4c
 8003670:	f000 f9b0 	bl	80039d4 <__assert_func>
 8003674:	4911      	ldr	r1, [pc, #68]	@ (80036bc <random+0x68>)
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <random+0x6c>)
 8003678:	e9c0 1300 	strd	r1, r3, [r0]
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <random+0x70>)
 800367e:	6083      	str	r3, [r0, #8]
 8003680:	230b      	movs	r3, #11
 8003682:	8183      	strh	r3, [r0, #12]
 8003684:	2100      	movs	r1, #0
 8003686:	2001      	movs	r0, #1
 8003688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800368c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800368e:	480e      	ldr	r0, [pc, #56]	@ (80036c8 <random+0x74>)
 8003690:	690b      	ldr	r3, [r1, #16]
 8003692:	694c      	ldr	r4, [r1, #20]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <random+0x78>)
 8003696:	4358      	muls	r0, r3
 8003698:	fb02 0004 	mla	r0, r2, r4, r0
 800369c:	fba3 3202 	umull	r3, r2, r3, r2
 80036a0:	3301      	adds	r3, #1
 80036a2:	eb40 0002 	adc.w	r0, r0, r2
 80036a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80036aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	20000018 	.word	0x20000018
 80036b4:	080056e0 	.word	0x080056e0
 80036b8:	080056f7 	.word	0x080056f7
 80036bc:	abcd330e 	.word	0xabcd330e
 80036c0:	e66d1234 	.word	0xe66d1234
 80036c4:	0005deec 	.word	0x0005deec
 80036c8:	5851f42d 	.word	0x5851f42d
 80036cc:	4c957f2d 	.word	0x4c957f2d

080036d0 <std>:
 80036d0:	2300      	movs	r3, #0
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	e9c0 3300 	strd	r3, r3, [r0]
 80036da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036de:	6083      	str	r3, [r0, #8]
 80036e0:	8181      	strh	r1, [r0, #12]
 80036e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80036e4:	81c2      	strh	r2, [r0, #14]
 80036e6:	6183      	str	r3, [r0, #24]
 80036e8:	4619      	mov	r1, r3
 80036ea:	2208      	movs	r2, #8
 80036ec:	305c      	adds	r0, #92	@ 0x5c
 80036ee:	f000 f8f4 	bl	80038da <memset>
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <std+0x58>)
 80036f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <std+0x5c>)
 80036f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <std+0x60>)
 80036fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <std+0x64>)
 8003700:	6323      	str	r3, [r4, #48]	@ 0x30
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <std+0x68>)
 8003704:	6224      	str	r4, [r4, #32]
 8003706:	429c      	cmp	r4, r3
 8003708:	d006      	beq.n	8003718 <std+0x48>
 800370a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800370e:	4294      	cmp	r4, r2
 8003710:	d002      	beq.n	8003718 <std+0x48>
 8003712:	33d0      	adds	r3, #208	@ 0xd0
 8003714:	429c      	cmp	r4, r3
 8003716:	d105      	bne.n	8003724 <std+0x54>
 8003718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800371c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003720:	f000 b954 	b.w	80039cc <__retarget_lock_init_recursive>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	08003855 	.word	0x08003855
 800372c:	08003877 	.word	0x08003877
 8003730:	080038af 	.word	0x080038af
 8003734:	080038d3 	.word	0x080038d3
 8003738:	2000012c 	.word	0x2000012c

0800373c <stdio_exit_handler>:
 800373c:	4a02      	ldr	r2, [pc, #8]	@ (8003748 <stdio_exit_handler+0xc>)
 800373e:	4903      	ldr	r1, [pc, #12]	@ (800374c <stdio_exit_handler+0x10>)
 8003740:	4803      	ldr	r0, [pc, #12]	@ (8003750 <stdio_exit_handler+0x14>)
 8003742:	f000 b869 	b.w	8003818 <_fwalk_sglue>
 8003746:	bf00      	nop
 8003748:	2000000c 	.word	0x2000000c
 800374c:	08003d19 	.word	0x08003d19
 8003750:	2000001c 	.word	0x2000001c

08003754 <cleanup_stdio>:
 8003754:	6841      	ldr	r1, [r0, #4]
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <cleanup_stdio+0x34>)
 8003758:	4299      	cmp	r1, r3
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	d001      	beq.n	8003764 <cleanup_stdio+0x10>
 8003760:	f000 fada 	bl	8003d18 <_fflush_r>
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <cleanup_stdio+0x38>)
 8003768:	4299      	cmp	r1, r3
 800376a:	d002      	beq.n	8003772 <cleanup_stdio+0x1e>
 800376c:	4620      	mov	r0, r4
 800376e:	f000 fad3 	bl	8003d18 <_fflush_r>
 8003772:	68e1      	ldr	r1, [r4, #12]
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <cleanup_stdio+0x3c>)
 8003776:	4299      	cmp	r1, r3
 8003778:	d004      	beq.n	8003784 <cleanup_stdio+0x30>
 800377a:	4620      	mov	r0, r4
 800377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003780:	f000 baca 	b.w	8003d18 <_fflush_r>
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	2000012c 	.word	0x2000012c
 800378c:	20000194 	.word	0x20000194
 8003790:	200001fc 	.word	0x200001fc

08003794 <global_stdio_init.part.0>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <global_stdio_init.part.0+0x30>)
 8003798:	4c0b      	ldr	r4, [pc, #44]	@ (80037c8 <global_stdio_init.part.0+0x34>)
 800379a:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <global_stdio_init.part.0+0x38>)
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4620      	mov	r0, r4
 80037a0:	2200      	movs	r2, #0
 80037a2:	2104      	movs	r1, #4
 80037a4:	f7ff ff94 	bl	80036d0 <std>
 80037a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037ac:	2201      	movs	r2, #1
 80037ae:	2109      	movs	r1, #9
 80037b0:	f7ff ff8e 	bl	80036d0 <std>
 80037b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037b8:	2202      	movs	r2, #2
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037be:	2112      	movs	r1, #18
 80037c0:	f7ff bf86 	b.w	80036d0 <std>
 80037c4:	20000264 	.word	0x20000264
 80037c8:	2000012c 	.word	0x2000012c
 80037cc:	0800373d 	.word	0x0800373d

080037d0 <__sfp_lock_acquire>:
 80037d0:	4801      	ldr	r0, [pc, #4]	@ (80037d8 <__sfp_lock_acquire+0x8>)
 80037d2:	f000 b8fc 	b.w	80039ce <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	2000026d 	.word	0x2000026d

080037dc <__sfp_lock_release>:
 80037dc:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <__sfp_lock_release+0x8>)
 80037de:	f000 b8f7 	b.w	80039d0 <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000026d 	.word	0x2000026d

080037e8 <__sinit>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	f7ff fff0 	bl	80037d0 <__sfp_lock_acquire>
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	b11b      	cbz	r3, 80037fc <__sinit+0x14>
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f7ff bff0 	b.w	80037dc <__sfp_lock_release>
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__sinit+0x28>)
 80037fe:	6223      	str	r3, [r4, #32]
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <__sinit+0x2c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f5      	bne.n	80037f4 <__sinit+0xc>
 8003808:	f7ff ffc4 	bl	8003794 <global_stdio_init.part.0>
 800380c:	e7f2      	b.n	80037f4 <__sinit+0xc>
 800380e:	bf00      	nop
 8003810:	08003755 	.word	0x08003755
 8003814:	20000264 	.word	0x20000264

08003818 <_fwalk_sglue>:
 8003818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800381c:	4607      	mov	r7, r0
 800381e:	4688      	mov	r8, r1
 8003820:	4614      	mov	r4, r2
 8003822:	2600      	movs	r6, #0
 8003824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003828:	f1b9 0901 	subs.w	r9, r9, #1
 800382c:	d505      	bpl.n	800383a <_fwalk_sglue+0x22>
 800382e:	6824      	ldr	r4, [r4, #0]
 8003830:	2c00      	cmp	r4, #0
 8003832:	d1f7      	bne.n	8003824 <_fwalk_sglue+0xc>
 8003834:	4630      	mov	r0, r6
 8003836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d907      	bls.n	8003850 <_fwalk_sglue+0x38>
 8003840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003844:	3301      	adds	r3, #1
 8003846:	d003      	beq.n	8003850 <_fwalk_sglue+0x38>
 8003848:	4629      	mov	r1, r5
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	4306      	orrs	r6, r0
 8003850:	3568      	adds	r5, #104	@ 0x68
 8003852:	e7e9      	b.n	8003828 <_fwalk_sglue+0x10>

08003854 <__sread>:
 8003854:	b510      	push	{r4, lr}
 8003856:	460c      	mov	r4, r1
 8003858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385c:	f000 f868 	bl	8003930 <_read_r>
 8003860:	2800      	cmp	r0, #0
 8003862:	bfab      	itete	ge
 8003864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003866:	89a3      	ldrhlt	r3, [r4, #12]
 8003868:	181b      	addge	r3, r3, r0
 800386a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800386e:	bfac      	ite	ge
 8003870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003872:	81a3      	strhlt	r3, [r4, #12]
 8003874:	bd10      	pop	{r4, pc}

08003876 <__swrite>:
 8003876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387a:	461f      	mov	r7, r3
 800387c:	898b      	ldrh	r3, [r1, #12]
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	4605      	mov	r5, r0
 8003882:	460c      	mov	r4, r1
 8003884:	4616      	mov	r6, r2
 8003886:	d505      	bpl.n	8003894 <__swrite+0x1e>
 8003888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388c:	2302      	movs	r3, #2
 800388e:	2200      	movs	r2, #0
 8003890:	f000 f83c 	bl	800390c <_lseek_r>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800389a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	4632      	mov	r2, r6
 80038a2:	463b      	mov	r3, r7
 80038a4:	4628      	mov	r0, r5
 80038a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038aa:	f000 b853 	b.w	8003954 <_write_r>

080038ae <__sseek>:
 80038ae:	b510      	push	{r4, lr}
 80038b0:	460c      	mov	r4, r1
 80038b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b6:	f000 f829 	bl	800390c <_lseek_r>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	bf15      	itete	ne
 80038c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038ca:	81a3      	strheq	r3, [r4, #12]
 80038cc:	bf18      	it	ne
 80038ce:	81a3      	strhne	r3, [r4, #12]
 80038d0:	bd10      	pop	{r4, pc}

080038d2 <__sclose>:
 80038d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d6:	f000 b809 	b.w	80038ec <_close_r>

080038da <memset>:
 80038da:	4402      	add	r2, r0
 80038dc:	4603      	mov	r3, r0
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <memset+0xa>
 80038e2:	4770      	bx	lr
 80038e4:	f803 1b01 	strb.w	r1, [r3], #1
 80038e8:	e7f9      	b.n	80038de <memset+0x4>
	...

080038ec <_close_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_close_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd ffe2 	bl	80018c0 <_close>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_close_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_close_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	20000268 	.word	0x20000268

0800390c <_lseek_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	@ (800392c <_lseek_r+0x20>)
 8003910:	4604      	mov	r4, r0
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	2200      	movs	r2, #0
 8003918:	602a      	str	r2, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f7fd fff7 	bl	800190e <_lseek>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_lseek_r+0x1e>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_lseek_r+0x1e>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	20000268 	.word	0x20000268

08003930 <_read_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_read_r+0x20>)
 8003934:	4604      	mov	r4, r0
 8003936:	4608      	mov	r0, r1
 8003938:	4611      	mov	r1, r2
 800393a:	2200      	movs	r2, #0
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fd ff85 	bl	800184e <_read>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_read_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_read_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000268 	.word	0x20000268

08003954 <_write_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_write_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fd ff90 	bl	8001888 <_write>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_write_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_write_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	20000268 	.word	0x20000268

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000018 	.word	0x20000018

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	@ (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	@ (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	@ (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fe38 	bl	800460c <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	080057c8 	.word	0x080057c8
 80039c0:	080057c8 	.word	0x080057c8
 80039c4:	080057c8 	.word	0x080057c8
 80039c8:	080057cc 	.word	0x080057cc

080039cc <__retarget_lock_init_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_acquire_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <__retarget_lock_release_recursive>:
 80039d0:	4770      	bx	lr
	...

080039d4 <__assert_func>:
 80039d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039d6:	4614      	mov	r4, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <__assert_func+0x2c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4605      	mov	r5, r0
 80039e0:	68d8      	ldr	r0, [r3, #12]
 80039e2:	b14c      	cbz	r4, 80039f8 <__assert_func+0x24>
 80039e4:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <__assert_func+0x30>)
 80039e6:	9100      	str	r1, [sp, #0]
 80039e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80039ec:	4906      	ldr	r1, [pc, #24]	@ (8003a08 <__assert_func+0x34>)
 80039ee:	462b      	mov	r3, r5
 80039f0:	f000 f9ba 	bl	8003d68 <fiprintf>
 80039f4:	f000 f9da 	bl	8003dac <abort>
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__assert_func+0x38>)
 80039fa:	461c      	mov	r4, r3
 80039fc:	e7f3      	b.n	80039e6 <__assert_func+0x12>
 80039fe:	bf00      	nop
 8003a00:	20000018 	.word	0x20000018
 8003a04:	08005751 	.word	0x08005751
 8003a08:	0800575e 	.word	0x0800575e
 8003a0c:	0800578c 	.word	0x0800578c

08003a10 <_free_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4605      	mov	r5, r0
 8003a14:	2900      	cmp	r1, #0
 8003a16:	d041      	beq.n	8003a9c <_free_r+0x8c>
 8003a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a1c:	1f0c      	subs	r4, r1, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bfb8      	it	lt
 8003a22:	18e4      	addlt	r4, r4, r3
 8003a24:	f000 f8e8 	bl	8003bf8 <__malloc_lock>
 8003a28:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa0 <_free_r+0x90>)
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	b933      	cbnz	r3, 8003a3c <_free_r+0x2c>
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	6014      	str	r4, [r2, #0]
 8003a32:	4628      	mov	r0, r5
 8003a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a38:	f000 b8e4 	b.w	8003c04 <__malloc_unlock>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d908      	bls.n	8003a52 <_free_r+0x42>
 8003a40:	6820      	ldr	r0, [r4, #0]
 8003a42:	1821      	adds	r1, r4, r0
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf01      	itttt	eq
 8003a48:	6819      	ldreq	r1, [r3, #0]
 8003a4a:	685b      	ldreq	r3, [r3, #4]
 8003a4c:	1809      	addeq	r1, r1, r0
 8003a4e:	6021      	streq	r1, [r4, #0]
 8003a50:	e7ed      	b.n	8003a2e <_free_r+0x1e>
 8003a52:	461a      	mov	r2, r3
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b10b      	cbz	r3, 8003a5c <_free_r+0x4c>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d9fa      	bls.n	8003a52 <_free_r+0x42>
 8003a5c:	6811      	ldr	r1, [r2, #0]
 8003a5e:	1850      	adds	r0, r2, r1
 8003a60:	42a0      	cmp	r0, r4
 8003a62:	d10b      	bne.n	8003a7c <_free_r+0x6c>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	4401      	add	r1, r0
 8003a68:	1850      	adds	r0, r2, r1
 8003a6a:	4283      	cmp	r3, r0
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	d1e0      	bne.n	8003a32 <_free_r+0x22>
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	6053      	str	r3, [r2, #4]
 8003a76:	4408      	add	r0, r1
 8003a78:	6010      	str	r0, [r2, #0]
 8003a7a:	e7da      	b.n	8003a32 <_free_r+0x22>
 8003a7c:	d902      	bls.n	8003a84 <_free_r+0x74>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	e7d6      	b.n	8003a32 <_free_r+0x22>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	1821      	adds	r1, r4, r0
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf04      	itt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	6063      	str	r3, [r4, #4]
 8003a92:	bf04      	itt	eq
 8003a94:	1809      	addeq	r1, r1, r0
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	6054      	str	r4, [r2, #4]
 8003a9a:	e7ca      	b.n	8003a32 <_free_r+0x22>
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000274 	.word	0x20000274

08003aa4 <malloc>:
 8003aa4:	4b02      	ldr	r3, [pc, #8]	@ (8003ab0 <malloc+0xc>)
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f000 b825 	b.w	8003af8 <_malloc_r>
 8003aae:	bf00      	nop
 8003ab0:	20000018 	.word	0x20000018

08003ab4 <sbrk_aligned>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8003af4 <sbrk_aligned+0x40>)
 8003ab8:	460c      	mov	r4, r1
 8003aba:	6831      	ldr	r1, [r6, #0]
 8003abc:	4605      	mov	r5, r0
 8003abe:	b911      	cbnz	r1, 8003ac6 <sbrk_aligned+0x12>
 8003ac0:	f000 f964 	bl	8003d8c <_sbrk_r>
 8003ac4:	6030      	str	r0, [r6, #0]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f95f 	bl	8003d8c <_sbrk_r>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d103      	bne.n	8003ada <sbrk_aligned+0x26>
 8003ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
 8003ada:	1cc4      	adds	r4, r0, #3
 8003adc:	f024 0403 	bic.w	r4, r4, #3
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d0f8      	beq.n	8003ad6 <sbrk_aligned+0x22>
 8003ae4:	1a21      	subs	r1, r4, r0
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 f950 	bl	8003d8c <_sbrk_r>
 8003aec:	3001      	adds	r0, #1
 8003aee:	d1f2      	bne.n	8003ad6 <sbrk_aligned+0x22>
 8003af0:	e7ef      	b.n	8003ad2 <sbrk_aligned+0x1e>
 8003af2:	bf00      	nop
 8003af4:	20000270 	.word	0x20000270

08003af8 <_malloc_r>:
 8003af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003afc:	1ccd      	adds	r5, r1, #3
 8003afe:	f025 0503 	bic.w	r5, r5, #3
 8003b02:	3508      	adds	r5, #8
 8003b04:	2d0c      	cmp	r5, #12
 8003b06:	bf38      	it	cc
 8003b08:	250c      	movcc	r5, #12
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	db01      	blt.n	8003b14 <_malloc_r+0x1c>
 8003b10:	42a9      	cmp	r1, r5
 8003b12:	d904      	bls.n	8003b1e <_malloc_r+0x26>
 8003b14:	230c      	movs	r3, #12
 8003b16:	6033      	str	r3, [r6, #0]
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf4 <_malloc_r+0xfc>
 8003b22:	f000 f869 	bl	8003bf8 <__malloc_lock>
 8003b26:	f8d8 3000 	ldr.w	r3, [r8]
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	bb44      	cbnz	r4, 8003b80 <_malloc_r+0x88>
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7ff ffbf 	bl	8003ab4 <sbrk_aligned>
 8003b36:	1c43      	adds	r3, r0, #1
 8003b38:	4604      	mov	r4, r0
 8003b3a:	d158      	bne.n	8003bee <_malloc_r+0xf6>
 8003b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b40:	4627      	mov	r7, r4
 8003b42:	2f00      	cmp	r7, #0
 8003b44:	d143      	bne.n	8003bce <_malloc_r+0xd6>
 8003b46:	2c00      	cmp	r4, #0
 8003b48:	d04b      	beq.n	8003be2 <_malloc_r+0xea>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	eb04 0903 	add.w	r9, r4, r3
 8003b54:	f000 f91a 	bl	8003d8c <_sbrk_r>
 8003b58:	4581      	cmp	r9, r0
 8003b5a:	d142      	bne.n	8003be2 <_malloc_r+0xea>
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	1a6d      	subs	r5, r5, r1
 8003b60:	4629      	mov	r1, r5
 8003b62:	4630      	mov	r0, r6
 8003b64:	f7ff ffa6 	bl	8003ab4 <sbrk_aligned>
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d03a      	beq.n	8003be2 <_malloc_r+0xea>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	442b      	add	r3, r5
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	f8d8 3000 	ldr.w	r3, [r8]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	bb62      	cbnz	r2, 8003bd4 <_malloc_r+0xdc>
 8003b7a:	f8c8 7000 	str.w	r7, [r8]
 8003b7e:	e00f      	b.n	8003ba0 <_malloc_r+0xa8>
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	1b52      	subs	r2, r2, r5
 8003b84:	d420      	bmi.n	8003bc8 <_malloc_r+0xd0>
 8003b86:	2a0b      	cmp	r2, #11
 8003b88:	d917      	bls.n	8003bba <_malloc_r+0xc2>
 8003b8a:	1961      	adds	r1, r4, r5
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	6025      	str	r5, [r4, #0]
 8003b90:	bf18      	it	ne
 8003b92:	6059      	strne	r1, [r3, #4]
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	bf08      	it	eq
 8003b98:	f8c8 1000 	streq.w	r1, [r8]
 8003b9c:	5162      	str	r2, [r4, r5]
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f82f 	bl	8003c04 <__malloc_unlock>
 8003ba6:	f104 000b 	add.w	r0, r4, #11
 8003baa:	1d23      	adds	r3, r4, #4
 8003bac:	f020 0007 	bic.w	r0, r0, #7
 8003bb0:	1ac2      	subs	r2, r0, r3
 8003bb2:	bf1c      	itt	ne
 8003bb4:	1a1b      	subne	r3, r3, r0
 8003bb6:	50a3      	strne	r3, [r4, r2]
 8003bb8:	e7af      	b.n	8003b1a <_malloc_r+0x22>
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	bf0c      	ite	eq
 8003bc0:	f8c8 2000 	streq.w	r2, [r8]
 8003bc4:	605a      	strne	r2, [r3, #4]
 8003bc6:	e7eb      	b.n	8003ba0 <_malloc_r+0xa8>
 8003bc8:	4623      	mov	r3, r4
 8003bca:	6864      	ldr	r4, [r4, #4]
 8003bcc:	e7ae      	b.n	8003b2c <_malloc_r+0x34>
 8003bce:	463c      	mov	r4, r7
 8003bd0:	687f      	ldr	r7, [r7, #4]
 8003bd2:	e7b6      	b.n	8003b42 <_malloc_r+0x4a>
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d1fb      	bne.n	8003bd4 <_malloc_r+0xdc>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6053      	str	r3, [r2, #4]
 8003be0:	e7de      	b.n	8003ba0 <_malloc_r+0xa8>
 8003be2:	230c      	movs	r3, #12
 8003be4:	6033      	str	r3, [r6, #0]
 8003be6:	4630      	mov	r0, r6
 8003be8:	f000 f80c 	bl	8003c04 <__malloc_unlock>
 8003bec:	e794      	b.n	8003b18 <_malloc_r+0x20>
 8003bee:	6005      	str	r5, [r0, #0]
 8003bf0:	e7d6      	b.n	8003ba0 <_malloc_r+0xa8>
 8003bf2:	bf00      	nop
 8003bf4:	20000274 	.word	0x20000274

08003bf8 <__malloc_lock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	@ (8003c00 <__malloc_lock+0x8>)
 8003bfa:	f7ff bee8 	b.w	80039ce <__retarget_lock_acquire_recursive>
 8003bfe:	bf00      	nop
 8003c00:	2000026c 	.word	0x2000026c

08003c04 <__malloc_unlock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	@ (8003c0c <__malloc_unlock+0x8>)
 8003c06:	f7ff bee3 	b.w	80039d0 <__retarget_lock_release_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	2000026c 	.word	0x2000026c

08003c10 <__sflush_r>:
 8003c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c18:	0716      	lsls	r6, r2, #28
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	d454      	bmi.n	8003cca <__sflush_r+0xba>
 8003c20:	684b      	ldr	r3, [r1, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dc02      	bgt.n	8003c2c <__sflush_r+0x1c>
 8003c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dd48      	ble.n	8003cbe <__sflush_r+0xae>
 8003c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d045      	beq.n	8003cbe <__sflush_r+0xae>
 8003c32:	2300      	movs	r3, #0
 8003c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c38:	682f      	ldr	r7, [r5, #0]
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	d030      	beq.n	8003ca2 <__sflush_r+0x92>
 8003c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0759      	lsls	r1, r3, #29
 8003c46:	d505      	bpl.n	8003c54 <__sflush_r+0x44>
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c4e:	b10b      	cbz	r3, 8003c54 <__sflush_r+0x44>
 8003c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c58:	6a21      	ldr	r1, [r4, #32]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b0      	blx	r6
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	d106      	bne.n	8003c72 <__sflush_r+0x62>
 8003c64:	6829      	ldr	r1, [r5, #0]
 8003c66:	291d      	cmp	r1, #29
 8003c68:	d82b      	bhi.n	8003cc2 <__sflush_r+0xb2>
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <__sflush_r+0x104>)
 8003c6c:	40ca      	lsrs	r2, r1
 8003c6e:	07d6      	lsls	r6, r2, #31
 8003c70:	d527      	bpl.n	8003cc2 <__sflush_r+0xb2>
 8003c72:	2200      	movs	r2, #0
 8003c74:	6062      	str	r2, [r4, #4]
 8003c76:	04d9      	lsls	r1, r3, #19
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	d504      	bpl.n	8003c88 <__sflush_r+0x78>
 8003c7e:	1c42      	adds	r2, r0, #1
 8003c80:	d101      	bne.n	8003c86 <__sflush_r+0x76>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	b903      	cbnz	r3, 8003c88 <__sflush_r+0x78>
 8003c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8a:	602f      	str	r7, [r5, #0]
 8003c8c:	b1b9      	cbz	r1, 8003cbe <__sflush_r+0xae>
 8003c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d002      	beq.n	8003c9c <__sflush_r+0x8c>
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7ff feba 	bl	8003a10 <_free_r>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca0:	e00d      	b.n	8003cbe <__sflush_r+0xae>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b0      	blx	r6
 8003ca8:	4602      	mov	r2, r0
 8003caa:	1c50      	adds	r0, r2, #1
 8003cac:	d1c9      	bne.n	8003c42 <__sflush_r+0x32>
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0c6      	beq.n	8003c42 <__sflush_r+0x32>
 8003cb4:	2b1d      	cmp	r3, #29
 8003cb6:	d001      	beq.n	8003cbc <__sflush_r+0xac>
 8003cb8:	2b16      	cmp	r3, #22
 8003cba:	d11e      	bne.n	8003cfa <__sflush_r+0xea>
 8003cbc:	602f      	str	r7, [r5, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e022      	b.n	8003d08 <__sflush_r+0xf8>
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	e01b      	b.n	8003d02 <__sflush_r+0xf2>
 8003cca:	690f      	ldr	r7, [r1, #16]
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	d0f6      	beq.n	8003cbe <__sflush_r+0xae>
 8003cd0:	0793      	lsls	r3, r2, #30
 8003cd2:	680e      	ldr	r6, [r1, #0]
 8003cd4:	bf08      	it	eq
 8003cd6:	694b      	ldreq	r3, [r1, #20]
 8003cd8:	600f      	str	r7, [r1, #0]
 8003cda:	bf18      	it	ne
 8003cdc:	2300      	movne	r3, #0
 8003cde:	eba6 0807 	sub.w	r8, r6, r7
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	dde9      	ble.n	8003cbe <__sflush_r+0xae>
 8003cea:	6a21      	ldr	r1, [r4, #32]
 8003cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cee:	4643      	mov	r3, r8
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b0      	blx	r6
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	dc08      	bgt.n	8003d0c <__sflush_r+0xfc>
 8003cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0c:	4407      	add	r7, r0
 8003d0e:	eba8 0800 	sub.w	r8, r8, r0
 8003d12:	e7e7      	b.n	8003ce4 <__sflush_r+0xd4>
 8003d14:	20400001 	.word	0x20400001

08003d18 <_fflush_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	b913      	cbnz	r3, 8003d28 <_fflush_r+0x10>
 8003d22:	2500      	movs	r5, #0
 8003d24:	4628      	mov	r0, r5
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	b118      	cbz	r0, 8003d32 <_fflush_r+0x1a>
 8003d2a:	6a03      	ldr	r3, [r0, #32]
 8003d2c:	b90b      	cbnz	r3, 8003d32 <_fflush_r+0x1a>
 8003d2e:	f7ff fd5b 	bl	80037e8 <__sinit>
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f3      	beq.n	8003d22 <_fflush_r+0xa>
 8003d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d404      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d46:	f7ff fe42 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f7ff ff5f 	bl	8003c10 <__sflush_r>
 8003d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d54:	07da      	lsls	r2, r3, #31
 8003d56:	4605      	mov	r5, r0
 8003d58:	d4e4      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d4e1      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d62:	f7ff fe35 	bl	80039d0 <__retarget_lock_release_recursive>
 8003d66:	e7dd      	b.n	8003d24 <_fflush_r+0xc>

08003d68 <fiprintf>:
 8003d68:	b40e      	push	{r1, r2, r3}
 8003d6a:	b503      	push	{r0, r1, lr}
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	ab03      	add	r3, sp, #12
 8003d70:	4805      	ldr	r0, [pc, #20]	@ (8003d88 <fiprintf+0x20>)
 8003d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d76:	6800      	ldr	r0, [r0, #0]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	f000 f847 	bl	8003e0c <_vfiprintf_r>
 8003d7e:	b002      	add	sp, #8
 8003d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d84:	b003      	add	sp, #12
 8003d86:	4770      	bx	lr
 8003d88:	20000018 	.word	0x20000018

08003d8c <_sbrk_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d06      	ldr	r5, [pc, #24]	@ (8003da8 <_sbrk_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fd fdc6 	bl	8001928 <_sbrk>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_sbrk_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_sbrk_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000268 	.word	0x20000268

08003dac <abort>:
 8003dac:	b508      	push	{r3, lr}
 8003dae:	2006      	movs	r0, #6
 8003db0:	f000 fb8c 	bl	80044cc <raise>
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fd fd3f 	bl	8001838 <_exit>

08003dba <__sfputc_r>:
 8003dba:	6893      	ldr	r3, [r2, #8]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	b410      	push	{r4}
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	da08      	bge.n	8003dd8 <__sfputc_r+0x1e>
 8003dc6:	6994      	ldr	r4, [r2, #24]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	db01      	blt.n	8003dd0 <__sfputc_r+0x16>
 8003dcc:	290a      	cmp	r1, #10
 8003dce:	d103      	bne.n	8003dd8 <__sfputc_r+0x1e>
 8003dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd4:	f000 babe 	b.w	8004354 <__swbuf_r>
 8003dd8:	6813      	ldr	r3, [r2, #0]
 8003dda:	1c58      	adds	r0, r3, #1
 8003ddc:	6010      	str	r0, [r2, #0]
 8003dde:	7019      	strb	r1, [r3, #0]
 8003de0:	4608      	mov	r0, r1
 8003de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <__sfputs_r>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	4614      	mov	r4, r2
 8003df0:	18d5      	adds	r5, r2, r3
 8003df2:	42ac      	cmp	r4, r5
 8003df4:	d101      	bne.n	8003dfa <__sfputs_r+0x12>
 8003df6:	2000      	movs	r0, #0
 8003df8:	e007      	b.n	8003e0a <__sfputs_r+0x22>
 8003dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfe:	463a      	mov	r2, r7
 8003e00:	4630      	mov	r0, r6
 8003e02:	f7ff ffda 	bl	8003dba <__sfputc_r>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d1f3      	bne.n	8003df2 <__sfputs_r+0xa>
 8003e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e0c <_vfiprintf_r>:
 8003e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e10:	460d      	mov	r5, r1
 8003e12:	b09d      	sub	sp, #116	@ 0x74
 8003e14:	4614      	mov	r4, r2
 8003e16:	4698      	mov	r8, r3
 8003e18:	4606      	mov	r6, r0
 8003e1a:	b118      	cbz	r0, 8003e24 <_vfiprintf_r+0x18>
 8003e1c:	6a03      	ldr	r3, [r0, #32]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <_vfiprintf_r+0x18>
 8003e20:	f7ff fce2 	bl	80037e8 <__sinit>
 8003e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e26:	07d9      	lsls	r1, r3, #31
 8003e28:	d405      	bmi.n	8003e36 <_vfiprintf_r+0x2a>
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	059a      	lsls	r2, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_vfiprintf_r+0x2a>
 8003e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e32:	f7ff fdcc 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003e36:	89ab      	ldrh	r3, [r5, #12]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	d501      	bpl.n	8003e40 <_vfiprintf_r+0x34>
 8003e3c:	692b      	ldr	r3, [r5, #16]
 8003e3e:	b99b      	cbnz	r3, 8003e68 <_vfiprintf_r+0x5c>
 8003e40:	4629      	mov	r1, r5
 8003e42:	4630      	mov	r0, r6
 8003e44:	f000 fac4 	bl	80043d0 <__swsetup_r>
 8003e48:	b170      	cbz	r0, 8003e68 <_vfiprintf_r+0x5c>
 8003e4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e4c:	07dc      	lsls	r4, r3, #31
 8003e4e:	d504      	bpl.n	8003e5a <_vfiprintf_r+0x4e>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	b01d      	add	sp, #116	@ 0x74
 8003e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5a:	89ab      	ldrh	r3, [r5, #12]
 8003e5c:	0598      	lsls	r0, r3, #22
 8003e5e:	d4f7      	bmi.n	8003e50 <_vfiprintf_r+0x44>
 8003e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e62:	f7ff fdb5 	bl	80039d0 <__retarget_lock_release_recursive>
 8003e66:	e7f3      	b.n	8003e50 <_vfiprintf_r+0x44>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e76:	2330      	movs	r3, #48	@ 0x30
 8003e78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004028 <_vfiprintf_r+0x21c>
 8003e7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e80:	f04f 0901 	mov.w	r9, #1
 8003e84:	4623      	mov	r3, r4
 8003e86:	469a      	mov	sl, r3
 8003e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e8c:	b10a      	cbz	r2, 8003e92 <_vfiprintf_r+0x86>
 8003e8e:	2a25      	cmp	r2, #37	@ 0x25
 8003e90:	d1f9      	bne.n	8003e86 <_vfiprintf_r+0x7a>
 8003e92:	ebba 0b04 	subs.w	fp, sl, r4
 8003e96:	d00b      	beq.n	8003eb0 <_vfiprintf_r+0xa4>
 8003e98:	465b      	mov	r3, fp
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ffa2 	bl	8003de8 <__sfputs_r>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	f000 80a7 	beq.w	8003ff8 <_vfiprintf_r+0x1ec>
 8003eaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eac:	445a      	add	r2, fp
 8003eae:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 809f 	beq.w	8003ff8 <_vfiprintf_r+0x1ec>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec4:	f10a 0a01 	add.w	sl, sl, #1
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	9307      	str	r3, [sp, #28]
 8003ecc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ed0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ed2:	4654      	mov	r4, sl
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eda:	4853      	ldr	r0, [pc, #332]	@ (8004028 <_vfiprintf_r+0x21c>)
 8003edc:	f7fc f980 	bl	80001e0 <memchr>
 8003ee0:	9a04      	ldr	r2, [sp, #16]
 8003ee2:	b9d8      	cbnz	r0, 8003f1c <_vfiprintf_r+0x110>
 8003ee4:	06d1      	lsls	r1, r2, #27
 8003ee6:	bf44      	itt	mi
 8003ee8:	2320      	movmi	r3, #32
 8003eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003eee:	0713      	lsls	r3, r2, #28
 8003ef0:	bf44      	itt	mi
 8003ef2:	232b      	movmi	r3, #43	@ 0x2b
 8003ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8003efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003efe:	d015      	beq.n	8003f2c <_vfiprintf_r+0x120>
 8003f00:	9a07      	ldr	r2, [sp, #28]
 8003f02:	4654      	mov	r4, sl
 8003f04:	2000      	movs	r0, #0
 8003f06:	f04f 0c0a 	mov.w	ip, #10
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f10:	3b30      	subs	r3, #48	@ 0x30
 8003f12:	2b09      	cmp	r3, #9
 8003f14:	d94b      	bls.n	8003fae <_vfiprintf_r+0x1a2>
 8003f16:	b1b0      	cbz	r0, 8003f46 <_vfiprintf_r+0x13a>
 8003f18:	9207      	str	r2, [sp, #28]
 8003f1a:	e014      	b.n	8003f46 <_vfiprintf_r+0x13a>
 8003f1c:	eba0 0308 	sub.w	r3, r0, r8
 8003f20:	fa09 f303 	lsl.w	r3, r9, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	46a2      	mov	sl, r4
 8003f2a:	e7d2      	b.n	8003ed2 <_vfiprintf_r+0xc6>
 8003f2c:	9b03      	ldr	r3, [sp, #12]
 8003f2e:	1d19      	adds	r1, r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	9103      	str	r1, [sp, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bfbb      	ittet	lt
 8003f38:	425b      	neglt	r3, r3
 8003f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f3e:	9307      	strge	r3, [sp, #28]
 8003f40:	9307      	strlt	r3, [sp, #28]
 8003f42:	bfb8      	it	lt
 8003f44:	9204      	strlt	r2, [sp, #16]
 8003f46:	7823      	ldrb	r3, [r4, #0]
 8003f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f4a:	d10a      	bne.n	8003f62 <_vfiprintf_r+0x156>
 8003f4c:	7863      	ldrb	r3, [r4, #1]
 8003f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f50:	d132      	bne.n	8003fb8 <_vfiprintf_r+0x1ac>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	1d1a      	adds	r2, r3, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	9203      	str	r2, [sp, #12]
 8003f5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f5e:	3402      	adds	r4, #2
 8003f60:	9305      	str	r3, [sp, #20]
 8003f62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004038 <_vfiprintf_r+0x22c>
 8003f66:	7821      	ldrb	r1, [r4, #0]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	f7fc f938 	bl	80001e0 <memchr>
 8003f70:	b138      	cbz	r0, 8003f82 <_vfiprintf_r+0x176>
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	eba0 000a 	sub.w	r0, r0, sl
 8003f78:	2240      	movs	r2, #64	@ 0x40
 8003f7a:	4082      	lsls	r2, r0
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	3401      	adds	r4, #1
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f86:	4829      	ldr	r0, [pc, #164]	@ (800402c <_vfiprintf_r+0x220>)
 8003f88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f8c:	2206      	movs	r2, #6
 8003f8e:	f7fc f927 	bl	80001e0 <memchr>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d03f      	beq.n	8004016 <_vfiprintf_r+0x20a>
 8003f96:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <_vfiprintf_r+0x224>)
 8003f98:	bb1b      	cbnz	r3, 8003fe2 <_vfiprintf_r+0x1d6>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	9303      	str	r3, [sp, #12]
 8003fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa8:	443b      	add	r3, r7
 8003faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fac:	e76a      	b.n	8003e84 <_vfiprintf_r+0x78>
 8003fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	e7a8      	b.n	8003f0a <_vfiprintf_r+0xfe>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	3401      	adds	r4, #1
 8003fbc:	9305      	str	r3, [sp, #20]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0c0a 	mov.w	ip, #10
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fca:	3a30      	subs	r2, #48	@ 0x30
 8003fcc:	2a09      	cmp	r2, #9
 8003fce:	d903      	bls.n	8003fd8 <_vfiprintf_r+0x1cc>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0c6      	beq.n	8003f62 <_vfiprintf_r+0x156>
 8003fd4:	9105      	str	r1, [sp, #20]
 8003fd6:	e7c4      	b.n	8003f62 <_vfiprintf_r+0x156>
 8003fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fdc:	4604      	mov	r4, r0
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e7f0      	b.n	8003fc4 <_vfiprintf_r+0x1b8>
 8003fe2:	ab03      	add	r3, sp, #12
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <_vfiprintf_r+0x228>)
 8003fea:	a904      	add	r1, sp, #16
 8003fec:	4630      	mov	r0, r6
 8003fee:	f3af 8000 	nop.w
 8003ff2:	4607      	mov	r7, r0
 8003ff4:	1c78      	adds	r0, r7, #1
 8003ff6:	d1d6      	bne.n	8003fa6 <_vfiprintf_r+0x19a>
 8003ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ffa:	07d9      	lsls	r1, r3, #31
 8003ffc:	d405      	bmi.n	800400a <_vfiprintf_r+0x1fe>
 8003ffe:	89ab      	ldrh	r3, [r5, #12]
 8004000:	059a      	lsls	r2, r3, #22
 8004002:	d402      	bmi.n	800400a <_vfiprintf_r+0x1fe>
 8004004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004006:	f7ff fce3 	bl	80039d0 <__retarget_lock_release_recursive>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	065b      	lsls	r3, r3, #25
 800400e:	f53f af1f 	bmi.w	8003e50 <_vfiprintf_r+0x44>
 8004012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004014:	e71e      	b.n	8003e54 <_vfiprintf_r+0x48>
 8004016:	ab03      	add	r3, sp, #12
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	462a      	mov	r2, r5
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <_vfiprintf_r+0x228>)
 800401e:	a904      	add	r1, sp, #16
 8004020:	4630      	mov	r0, r6
 8004022:	f000 f879 	bl	8004118 <_printf_i>
 8004026:	e7e4      	b.n	8003ff2 <_vfiprintf_r+0x1e6>
 8004028:	0800578d 	.word	0x0800578d
 800402c:	08005797 	.word	0x08005797
 8004030:	00000000 	.word	0x00000000
 8004034:	08003de9 	.word	0x08003de9
 8004038:	08005793 	.word	0x08005793

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4698      	mov	r8, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800404c:	4293      	cmp	r3, r2
 800404e:	bfb8      	it	lt
 8004050:	4613      	movlt	r3, r2
 8004052:	6033      	str	r3, [r6, #0]
 8004054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004058:	4607      	mov	r7, r0
 800405a:	460c      	mov	r4, r1
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc26      	bgt.n	80040d2 <_printf_common+0x96>
 8004084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	3b00      	subs	r3, #0
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42b      	bmi.n	80040ec <_printf_common+0xb0>
 8004094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004098:	4641      	mov	r1, r8
 800409a:	4638      	mov	r0, r7
 800409c:	47c8      	blx	r9
 800409e:	3001      	adds	r0, #1
 80040a0:	d01e      	beq.n	80040e0 <_printf_common+0xa4>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	6922      	ldr	r2, [r4, #16]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf02      	ittt	eq
 80040ae:	68e5      	ldreq	r5, [r4, #12]
 80040b0:	6833      	ldreq	r3, [r6, #0]
 80040b2:	1aed      	subeq	r5, r5, r3
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	bf0c      	ite	eq
 80040b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040bc:	2500      	movne	r5, #0
 80040be:	4293      	cmp	r3, r2
 80040c0:	bfc4      	itt	gt
 80040c2:	1a9b      	subgt	r3, r3, r2
 80040c4:	18ed      	addgt	r5, r5, r3
 80040c6:	2600      	movs	r6, #0
 80040c8:	341a      	adds	r4, #26
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d11a      	bne.n	8004104 <_printf_common+0xc8>
 80040ce:	2000      	movs	r0, #0
 80040d0:	e008      	b.n	80040e4 <_printf_common+0xa8>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4652      	mov	r2, sl
 80040d6:	4641      	mov	r1, r8
 80040d8:	4638      	mov	r0, r7
 80040da:	47c8      	blx	r9
 80040dc:	3001      	adds	r0, #1
 80040de:	d103      	bne.n	80040e8 <_printf_common+0xac>
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7c6      	b.n	800407a <_printf_common+0x3e>
 80040ec:	18e1      	adds	r1, r4, r3
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	2030      	movs	r0, #48	@ 0x30
 80040f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040f6:	4422      	add	r2, r4
 80040f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004100:	3302      	adds	r3, #2
 8004102:	e7c7      	b.n	8004094 <_printf_common+0x58>
 8004104:	2301      	movs	r3, #1
 8004106:	4622      	mov	r2, r4
 8004108:	4641      	mov	r1, r8
 800410a:	4638      	mov	r0, r7
 800410c:	47c8      	blx	r9
 800410e:	3001      	adds	r0, #1
 8004110:	d0e6      	beq.n	80040e0 <_printf_common+0xa4>
 8004112:	3601      	adds	r6, #1
 8004114:	e7d9      	b.n	80040ca <_printf_common+0x8e>
	...

08004118 <_printf_i>:
 8004118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	7e0f      	ldrb	r7, [r1, #24]
 800411e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004120:	2f78      	cmp	r7, #120	@ 0x78
 8004122:	4691      	mov	r9, r2
 8004124:	4680      	mov	r8, r0
 8004126:	460c      	mov	r4, r1
 8004128:	469a      	mov	sl, r3
 800412a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800412e:	d807      	bhi.n	8004140 <_printf_i+0x28>
 8004130:	2f62      	cmp	r7, #98	@ 0x62
 8004132:	d80a      	bhi.n	800414a <_printf_i+0x32>
 8004134:	2f00      	cmp	r7, #0
 8004136:	f000 80d1 	beq.w	80042dc <_printf_i+0x1c4>
 800413a:	2f58      	cmp	r7, #88	@ 0x58
 800413c:	f000 80b8 	beq.w	80042b0 <_printf_i+0x198>
 8004140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004148:	e03a      	b.n	80041c0 <_printf_i+0xa8>
 800414a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800414e:	2b15      	cmp	r3, #21
 8004150:	d8f6      	bhi.n	8004140 <_printf_i+0x28>
 8004152:	a101      	add	r1, pc, #4	@ (adr r1, 8004158 <_printf_i+0x40>)
 8004154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004158:	080041b1 	.word	0x080041b1
 800415c:	080041c5 	.word	0x080041c5
 8004160:	08004141 	.word	0x08004141
 8004164:	08004141 	.word	0x08004141
 8004168:	08004141 	.word	0x08004141
 800416c:	08004141 	.word	0x08004141
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004141 	.word	0x08004141
 8004178:	08004141 	.word	0x08004141
 800417c:	08004141 	.word	0x08004141
 8004180:	08004141 	.word	0x08004141
 8004184:	080042c3 	.word	0x080042c3
 8004188:	080041ef 	.word	0x080041ef
 800418c:	0800427d 	.word	0x0800427d
 8004190:	08004141 	.word	0x08004141
 8004194:	08004141 	.word	0x08004141
 8004198:	080042e5 	.word	0x080042e5
 800419c:	08004141 	.word	0x08004141
 80041a0:	080041ef 	.word	0x080041ef
 80041a4:	08004141 	.word	0x08004141
 80041a8:	08004141 	.word	0x08004141
 80041ac:	08004285 	.word	0x08004285
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6032      	str	r2, [r6, #0]
 80041b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041c0:	2301      	movs	r3, #1
 80041c2:	e09c      	b.n	80042fe <_printf_i+0x1e6>
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	6031      	str	r1, [r6, #0]
 80041cc:	0606      	lsls	r6, r0, #24
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0xbc>
 80041d0:	681d      	ldr	r5, [r3, #0]
 80041d2:	e003      	b.n	80041dc <_printf_i+0xc4>
 80041d4:	0645      	lsls	r5, r0, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0xb8>
 80041d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041dc:	2d00      	cmp	r5, #0
 80041de:	da03      	bge.n	80041e8 <_printf_i+0xd0>
 80041e0:	232d      	movs	r3, #45	@ 0x2d
 80041e2:	426d      	negs	r5, r5
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e8:	4858      	ldr	r0, [pc, #352]	@ (800434c <_printf_i+0x234>)
 80041ea:	230a      	movs	r3, #10
 80041ec:	e011      	b.n	8004212 <_printf_i+0xfa>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	6833      	ldr	r3, [r6, #0]
 80041f2:	0608      	lsls	r0, r1, #24
 80041f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041f8:	d402      	bmi.n	8004200 <_printf_i+0xe8>
 80041fa:	0649      	lsls	r1, r1, #25
 80041fc:	bf48      	it	mi
 80041fe:	b2ad      	uxthmi	r5, r5
 8004200:	2f6f      	cmp	r7, #111	@ 0x6f
 8004202:	4852      	ldr	r0, [pc, #328]	@ (800434c <_printf_i+0x234>)
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	bf14      	ite	ne
 8004208:	230a      	movne	r3, #10
 800420a:	2308      	moveq	r3, #8
 800420c:	2100      	movs	r1, #0
 800420e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004212:	6866      	ldr	r6, [r4, #4]
 8004214:	60a6      	str	r6, [r4, #8]
 8004216:	2e00      	cmp	r6, #0
 8004218:	db05      	blt.n	8004226 <_printf_i+0x10e>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	432e      	orrs	r6, r5
 800421e:	f021 0104 	bic.w	r1, r1, #4
 8004222:	6021      	str	r1, [r4, #0]
 8004224:	d04b      	beq.n	80042be <_printf_i+0x1a6>
 8004226:	4616      	mov	r6, r2
 8004228:	fbb5 f1f3 	udiv	r1, r5, r3
 800422c:	fb03 5711 	mls	r7, r3, r1, r5
 8004230:	5dc7      	ldrb	r7, [r0, r7]
 8004232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004236:	462f      	mov	r7, r5
 8004238:	42bb      	cmp	r3, r7
 800423a:	460d      	mov	r5, r1
 800423c:	d9f4      	bls.n	8004228 <_printf_i+0x110>
 800423e:	2b08      	cmp	r3, #8
 8004240:	d10b      	bne.n	800425a <_printf_i+0x142>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	07df      	lsls	r7, r3, #31
 8004246:	d508      	bpl.n	800425a <_printf_i+0x142>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6861      	ldr	r1, [r4, #4]
 800424c:	4299      	cmp	r1, r3
 800424e:	bfde      	ittt	le
 8004250:	2330      	movle	r3, #48	@ 0x30
 8004252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800425a:	1b92      	subs	r2, r2, r6
 800425c:	6122      	str	r2, [r4, #16]
 800425e:	f8cd a000 	str.w	sl, [sp]
 8004262:	464b      	mov	r3, r9
 8004264:	aa03      	add	r2, sp, #12
 8004266:	4621      	mov	r1, r4
 8004268:	4640      	mov	r0, r8
 800426a:	f7ff fee7 	bl	800403c <_printf_common>
 800426e:	3001      	adds	r0, #1
 8004270:	d14a      	bne.n	8004308 <_printf_i+0x1f0>
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	b004      	add	sp, #16
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	4832      	ldr	r0, [pc, #200]	@ (8004350 <_printf_i+0x238>)
 8004286:	2778      	movs	r7, #120	@ 0x78
 8004288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	061f      	lsls	r7, r3, #24
 8004292:	f851 5b04 	ldr.w	r5, [r1], #4
 8004296:	d402      	bmi.n	800429e <_printf_i+0x186>
 8004298:	065f      	lsls	r7, r3, #25
 800429a:	bf48      	it	mi
 800429c:	b2ad      	uxthmi	r5, r5
 800429e:	6031      	str	r1, [r6, #0]
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	bf44      	itt	mi
 80042a4:	f043 0320 	orrmi.w	r3, r3, #32
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b11d      	cbz	r5, 80042b4 <_printf_i+0x19c>
 80042ac:	2310      	movs	r3, #16
 80042ae:	e7ad      	b.n	800420c <_printf_i+0xf4>
 80042b0:	4826      	ldr	r0, [pc, #152]	@ (800434c <_printf_i+0x234>)
 80042b2:	e7e9      	b.n	8004288 <_printf_i+0x170>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f023 0320 	bic.w	r3, r3, #32
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	e7f6      	b.n	80042ac <_printf_i+0x194>
 80042be:	4616      	mov	r6, r2
 80042c0:	e7bd      	b.n	800423e <_printf_i+0x126>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	6961      	ldr	r1, [r4, #20]
 80042c8:	1d18      	adds	r0, r3, #4
 80042ca:	6030      	str	r0, [r6, #0]
 80042cc:	062e      	lsls	r6, r5, #24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	d501      	bpl.n	80042d6 <_printf_i+0x1be>
 80042d2:	6019      	str	r1, [r3, #0]
 80042d4:	e002      	b.n	80042dc <_printf_i+0x1c4>
 80042d6:	0668      	lsls	r0, r5, #25
 80042d8:	d5fb      	bpl.n	80042d2 <_printf_i+0x1ba>
 80042da:	8019      	strh	r1, [r3, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	4616      	mov	r6, r2
 80042e2:	e7bc      	b.n	800425e <_printf_i+0x146>
 80042e4:	6833      	ldr	r3, [r6, #0]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	6032      	str	r2, [r6, #0]
 80042ea:	681e      	ldr	r6, [r3, #0]
 80042ec:	6862      	ldr	r2, [r4, #4]
 80042ee:	2100      	movs	r1, #0
 80042f0:	4630      	mov	r0, r6
 80042f2:	f7fb ff75 	bl	80001e0 <memchr>
 80042f6:	b108      	cbz	r0, 80042fc <_printf_i+0x1e4>
 80042f8:	1b80      	subs	r0, r0, r6
 80042fa:	6060      	str	r0, [r4, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	2300      	movs	r3, #0
 8004302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004306:	e7aa      	b.n	800425e <_printf_i+0x146>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	4632      	mov	r2, r6
 800430c:	4649      	mov	r1, r9
 800430e:	4640      	mov	r0, r8
 8004310:	47d0      	blx	sl
 8004312:	3001      	adds	r0, #1
 8004314:	d0ad      	beq.n	8004272 <_printf_i+0x15a>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	079b      	lsls	r3, r3, #30
 800431a:	d413      	bmi.n	8004344 <_printf_i+0x22c>
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	4298      	cmp	r0, r3
 8004322:	bfb8      	it	lt
 8004324:	4618      	movlt	r0, r3
 8004326:	e7a6      	b.n	8004276 <_printf_i+0x15e>
 8004328:	2301      	movs	r3, #1
 800432a:	4632      	mov	r2, r6
 800432c:	4649      	mov	r1, r9
 800432e:	4640      	mov	r0, r8
 8004330:	47d0      	blx	sl
 8004332:	3001      	adds	r0, #1
 8004334:	d09d      	beq.n	8004272 <_printf_i+0x15a>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	9903      	ldr	r1, [sp, #12]
 800433c:	1a5b      	subs	r3, r3, r1
 800433e:	42ab      	cmp	r3, r5
 8004340:	dcf2      	bgt.n	8004328 <_printf_i+0x210>
 8004342:	e7eb      	b.n	800431c <_printf_i+0x204>
 8004344:	2500      	movs	r5, #0
 8004346:	f104 0619 	add.w	r6, r4, #25
 800434a:	e7f5      	b.n	8004338 <_printf_i+0x220>
 800434c:	0800579e 	.word	0x0800579e
 8004350:	080057af 	.word	0x080057af

08004354 <__swbuf_r>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	460e      	mov	r6, r1
 8004358:	4614      	mov	r4, r2
 800435a:	4605      	mov	r5, r0
 800435c:	b118      	cbz	r0, 8004366 <__swbuf_r+0x12>
 800435e:	6a03      	ldr	r3, [r0, #32]
 8004360:	b90b      	cbnz	r3, 8004366 <__swbuf_r+0x12>
 8004362:	f7ff fa41 	bl	80037e8 <__sinit>
 8004366:	69a3      	ldr	r3, [r4, #24]
 8004368:	60a3      	str	r3, [r4, #8]
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	071a      	lsls	r2, r3, #28
 800436e:	d501      	bpl.n	8004374 <__swbuf_r+0x20>
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	b943      	cbnz	r3, 8004386 <__swbuf_r+0x32>
 8004374:	4621      	mov	r1, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f82a 	bl	80043d0 <__swsetup_r>
 800437c:	b118      	cbz	r0, 8004386 <__swbuf_r+0x32>
 800437e:	f04f 37ff 	mov.w	r7, #4294967295
 8004382:	4638      	mov	r0, r7
 8004384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	1a98      	subs	r0, r3, r2
 800438c:	6963      	ldr	r3, [r4, #20]
 800438e:	b2f6      	uxtb	r6, r6
 8004390:	4283      	cmp	r3, r0
 8004392:	4637      	mov	r7, r6
 8004394:	dc05      	bgt.n	80043a2 <__swbuf_r+0x4e>
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f7ff fcbd 	bl	8003d18 <_fflush_r>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1ed      	bne.n	800437e <__swbuf_r+0x2a>
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	60a3      	str	r3, [r4, #8]
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	701e      	strb	r6, [r3, #0]
 80043b0:	6962      	ldr	r2, [r4, #20]
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d004      	beq.n	80043c2 <__swbuf_r+0x6e>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	07db      	lsls	r3, r3, #31
 80043bc:	d5e1      	bpl.n	8004382 <__swbuf_r+0x2e>
 80043be:	2e0a      	cmp	r6, #10
 80043c0:	d1df      	bne.n	8004382 <__swbuf_r+0x2e>
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f7ff fca7 	bl	8003d18 <_fflush_r>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d0d9      	beq.n	8004382 <__swbuf_r+0x2e>
 80043ce:	e7d6      	b.n	800437e <__swbuf_r+0x2a>

080043d0 <__swsetup_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4b29      	ldr	r3, [pc, #164]	@ (8004478 <__swsetup_r+0xa8>)
 80043d4:	4605      	mov	r5, r0
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	460c      	mov	r4, r1
 80043da:	b118      	cbz	r0, 80043e4 <__swsetup_r+0x14>
 80043dc:	6a03      	ldr	r3, [r0, #32]
 80043de:	b90b      	cbnz	r3, 80043e4 <__swsetup_r+0x14>
 80043e0:	f7ff fa02 	bl	80037e8 <__sinit>
 80043e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e8:	0719      	lsls	r1, r3, #28
 80043ea:	d422      	bmi.n	8004432 <__swsetup_r+0x62>
 80043ec:	06da      	lsls	r2, r3, #27
 80043ee:	d407      	bmi.n	8004400 <__swsetup_r+0x30>
 80043f0:	2209      	movs	r2, #9
 80043f2:	602a      	str	r2, [r5, #0]
 80043f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	e033      	b.n	8004468 <__swsetup_r+0x98>
 8004400:	0758      	lsls	r0, r3, #29
 8004402:	d512      	bpl.n	800442a <__swsetup_r+0x5a>
 8004404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004406:	b141      	cbz	r1, 800441a <__swsetup_r+0x4a>
 8004408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800440c:	4299      	cmp	r1, r3
 800440e:	d002      	beq.n	8004416 <__swsetup_r+0x46>
 8004410:	4628      	mov	r0, r5
 8004412:	f7ff fafd 	bl	8003a10 <_free_r>
 8004416:	2300      	movs	r3, #0
 8004418:	6363      	str	r3, [r4, #52]	@ 0x34
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	b94b      	cbnz	r3, 800444a <__swsetup_r+0x7a>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800443c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004440:	d003      	beq.n	800444a <__swsetup_r+0x7a>
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f883 	bl	8004550 <__smakebuf_r>
 800444a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444e:	f013 0201 	ands.w	r2, r3, #1
 8004452:	d00a      	beq.n	800446a <__swsetup_r+0x9a>
 8004454:	2200      	movs	r2, #0
 8004456:	60a2      	str	r2, [r4, #8]
 8004458:	6962      	ldr	r2, [r4, #20]
 800445a:	4252      	negs	r2, r2
 800445c:	61a2      	str	r2, [r4, #24]
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	b942      	cbnz	r2, 8004474 <__swsetup_r+0xa4>
 8004462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004466:	d1c5      	bne.n	80043f4 <__swsetup_r+0x24>
 8004468:	bd38      	pop	{r3, r4, r5, pc}
 800446a:	0799      	lsls	r1, r3, #30
 800446c:	bf58      	it	pl
 800446e:	6962      	ldrpl	r2, [r4, #20]
 8004470:	60a2      	str	r2, [r4, #8]
 8004472:	e7f4      	b.n	800445e <__swsetup_r+0x8e>
 8004474:	2000      	movs	r0, #0
 8004476:	e7f7      	b.n	8004468 <__swsetup_r+0x98>
 8004478:	20000018 	.word	0x20000018

0800447c <_raise_r>:
 800447c:	291f      	cmp	r1, #31
 800447e:	b538      	push	{r3, r4, r5, lr}
 8004480:	4605      	mov	r5, r0
 8004482:	460c      	mov	r4, r1
 8004484:	d904      	bls.n	8004490 <_raise_r+0x14>
 8004486:	2316      	movs	r3, #22
 8004488:	6003      	str	r3, [r0, #0]
 800448a:	f04f 30ff 	mov.w	r0, #4294967295
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004492:	b112      	cbz	r2, 800449a <_raise_r+0x1e>
 8004494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004498:	b94b      	cbnz	r3, 80044ae <_raise_r+0x32>
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f830 	bl	8004500 <_getpid_r>
 80044a0:	4622      	mov	r2, r4
 80044a2:	4601      	mov	r1, r0
 80044a4:	4628      	mov	r0, r5
 80044a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044aa:	f000 b817 	b.w	80044dc <_kill_r>
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d00a      	beq.n	80044c8 <_raise_r+0x4c>
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	d103      	bne.n	80044be <_raise_r+0x42>
 80044b6:	2316      	movs	r3, #22
 80044b8:	6003      	str	r3, [r0, #0]
 80044ba:	2001      	movs	r0, #1
 80044bc:	e7e7      	b.n	800448e <_raise_r+0x12>
 80044be:	2100      	movs	r1, #0
 80044c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80044c4:	4620      	mov	r0, r4
 80044c6:	4798      	blx	r3
 80044c8:	2000      	movs	r0, #0
 80044ca:	e7e0      	b.n	800448e <_raise_r+0x12>

080044cc <raise>:
 80044cc:	4b02      	ldr	r3, [pc, #8]	@ (80044d8 <raise+0xc>)
 80044ce:	4601      	mov	r1, r0
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	f7ff bfd3 	b.w	800447c <_raise_r>
 80044d6:	bf00      	nop
 80044d8:	20000018 	.word	0x20000018

080044dc <_kill_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	@ (80044fc <_kill_r+0x20>)
 80044e0:	2300      	movs	r3, #0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	f7fd f995 	bl	8001818 <_kill>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	d102      	bne.n	80044f8 <_kill_r+0x1c>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	b103      	cbz	r3, 80044f8 <_kill_r+0x1c>
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
 80044fa:	bf00      	nop
 80044fc:	20000268 	.word	0x20000268

08004500 <_getpid_r>:
 8004500:	f7fd b982 	b.w	8001808 <_getpid>

08004504 <__swhatbuf_r>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	460c      	mov	r4, r1
 8004508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450c:	2900      	cmp	r1, #0
 800450e:	b096      	sub	sp, #88	@ 0x58
 8004510:	4615      	mov	r5, r2
 8004512:	461e      	mov	r6, r3
 8004514:	da0d      	bge.n	8004532 <__swhatbuf_r+0x2e>
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	bf14      	ite	ne
 8004522:	2340      	movne	r3, #64	@ 0x40
 8004524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004528:	2000      	movs	r0, #0
 800452a:	6031      	str	r1, [r6, #0]
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	b016      	add	sp, #88	@ 0x58
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	466a      	mov	r2, sp
 8004534:	f000 f848 	bl	80045c8 <_fstat_r>
 8004538:	2800      	cmp	r0, #0
 800453a:	dbec      	blt.n	8004516 <__swhatbuf_r+0x12>
 800453c:	9901      	ldr	r1, [sp, #4]
 800453e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004546:	4259      	negs	r1, r3
 8004548:	4159      	adcs	r1, r3
 800454a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800454e:	e7eb      	b.n	8004528 <__swhatbuf_r+0x24>

08004550 <__smakebuf_r>:
 8004550:	898b      	ldrh	r3, [r1, #12]
 8004552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004554:	079d      	lsls	r5, r3, #30
 8004556:	4606      	mov	r6, r0
 8004558:	460c      	mov	r4, r1
 800455a:	d507      	bpl.n	800456c <__smakebuf_r+0x1c>
 800455c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2301      	movs	r3, #1
 8004566:	6163      	str	r3, [r4, #20]
 8004568:	b003      	add	sp, #12
 800456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800456c:	ab01      	add	r3, sp, #4
 800456e:	466a      	mov	r2, sp
 8004570:	f7ff ffc8 	bl	8004504 <__swhatbuf_r>
 8004574:	9f00      	ldr	r7, [sp, #0]
 8004576:	4605      	mov	r5, r0
 8004578:	4639      	mov	r1, r7
 800457a:	4630      	mov	r0, r6
 800457c:	f7ff fabc 	bl	8003af8 <_malloc_r>
 8004580:	b948      	cbnz	r0, 8004596 <__smakebuf_r+0x46>
 8004582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004586:	059a      	lsls	r2, r3, #22
 8004588:	d4ee      	bmi.n	8004568 <__smakebuf_r+0x18>
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	e7e2      	b.n	800455c <__smakebuf_r+0xc>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	6020      	str	r0, [r4, #0]
 800459a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	9b01      	ldr	r3, [sp, #4]
 80045a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045a6:	b15b      	cbz	r3, 80045c0 <__smakebuf_r+0x70>
 80045a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 f81d 	bl	80045ec <_isatty_r>
 80045b2:	b128      	cbz	r0, 80045c0 <__smakebuf_r+0x70>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	431d      	orrs	r5, r3
 80045c4:	81a5      	strh	r5, [r4, #12]
 80045c6:	e7cf      	b.n	8004568 <__smakebuf_r+0x18>

080045c8 <_fstat_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	@ (80045e8 <_fstat_r+0x20>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	f7fd f97f 	bl	80018d8 <_fstat>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d102      	bne.n	80045e4 <_fstat_r+0x1c>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	b103      	cbz	r3, 80045e4 <_fstat_r+0x1c>
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	bd38      	pop	{r3, r4, r5, pc}
 80045e6:	bf00      	nop
 80045e8:	20000268 	.word	0x20000268

080045ec <_isatty_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	@ (8004608 <_isatty_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fd f97e 	bl	80018f8 <_isatty>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_isatty_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_isatty_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000268 	.word	0x20000268

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
